{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1","program":"/home/acer/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","nom","/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"lexical\"","--cfg","feature=\"lexical-core\"","--cfg","feature=\"std\"","-C","metadata=c9d28be51b64bd1e","-C","extra-filename=-c9d28be51b64bd1e","--out-dir","/home/acer/ProgettoIN490/MySniffer/target/rls/debug/deps","-L","dependency=/home/acer/ProgettoIN490/MySniffer/target/rls/debug/deps","--extern","lexical_core=/home/acer/ProgettoIN490/MySniffer/target/rls/debug/deps/liblexical_core-77ed1154f9c62037.rmeta","--extern","memchr=/home/acer/ProgettoIN490/MySniffer/target/rls/debug/deps/libmemchr-eebe216eadbddf11.rmeta","--cap-lints","allow","--cfg","stable_i128","--error-format=json","--sysroot","/home/acer/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/acer/ProgettoIN490/MySniffer/target/rls/debug/deps/libnom-c9d28be51b64bd1e.rmeta"},"prelude":{"crate_id":{"name":"nom","disambiguator":[1343468282203030836,16266756852338369751]},"crate_root":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src","external_crates":[{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","num":2,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":15,"id":{"name":"lexical_core","disambiguator":[16537244726897764272,6052328865914365967]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[17215305307943534339,17386179787251686105]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[8192225388863340420,3173580909043468535]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":18,"id":{"name":"static_assertions","disambiguator":[1985408401218249774,4008792553182406103]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":19,"id":{"name":"arrayvec","disambiguator":[4156748830083507113,11014426652847646224]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":20,"id":{"name":"ryu","disambiguator":[10271898074721381138,10183201729296997690]}},{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","num":21,"id":{"name":"memchr","disambiguator":[6922014264122063348,15211823938867907530]}}],"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":0,"byte_end":16497,"line_start":1,"line_end":505,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":5891},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15633,"byte_end":15638,"line_start":449,"line_end":449,"column_start":7,"column_end":12},"alias_span":null,"name":"alloc","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3068},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15640,"byte_end":15646,"line_start":449,"line_end":449,"column_start":14,"column_end":20},"alias_span":null,"name":"borrow","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":45},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15648,"byte_end":15653,"line_start":449,"line_end":449,"column_start":22,"column_end":27},"alias_span":null,"name":"boxed","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":2037},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15655,"byte_end":15658,"line_start":449,"line_end":449,"column_start":29,"column_end":32},"alias_span":null,"name":"cmp","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":1,"index":571},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15660,"byte_end":15671,"line_start":449,"line_end":449,"column_start":34,"column_end":45},"alias_span":null,"name":"collections","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":2208},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15673,"byte_end":15680,"line_start":449,"line_end":449,"column_start":47,"column_end":54},"alias_span":null,"name":"convert","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3162},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15682,"byte_end":15685,"line_start":449,"line_end":449,"column_start":56,"column_end":59},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":7070},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15687,"byte_end":15691,"line_start":449,"line_end":449,"column_start":61,"column_end":65},"alias_span":null,"name":"hash","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":3199},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15693,"byte_end":15697,"line_start":449,"line_end":449,"column_start":67,"column_end":71},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":1114},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15699,"byte_end":15702,"line_start":449,"line_end":449,"column_start":73,"column_end":76},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":1593},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15704,"byte_end":15707,"line_start":449,"line_end":449,"column_start":78,"column_end":81},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":5026},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15709,"byte_end":15715,"line_start":449,"line_end":449,"column_start":83,"column_end":89},"alias_span":null,"name":"option","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":5244},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15717,"byte_end":15723,"line_start":449,"line_end":449,"column_start":91,"column_end":97},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3196},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15731,"byte_end":15736,"line_start":450,"line_end":450,"column_start":7,"column_end":12},"alias_span":null,"name":"slice","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3349},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15738,"byte_end":15741,"line_start":450,"line_end":450,"column_start":14,"column_end":17},"alias_span":null,"name":"str","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3455},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15743,"byte_end":15749,"line_start":450,"line_end":450,"column_start":19,"column_end":25},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3724},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15751,"byte_end":15754,"line_start":450,"line_end":450,"column_start":27,"column_end":30},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":1,"index":25},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15850,"byte_end":15857,"line_start":455,"line_end":455,"column_start":20,"column_end":27},"alias_span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15861,"byte_end":15863,"line_start":455,"line_end":455,"column_start":31,"column_end":33},"name":"v1","value":"","parent":{"krate":0,"index":34}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15945,"byte_end":15946,"line_start":463,"line_end":463,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15945,"byte_end":15946,"line_start":463,"line_end":463,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15945,"byte_end":15946,"line_start":463,"line_end":463,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15945,"byte_end":15946,"line_start":463,"line_end":463,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15945,"byte_end":15946,"line_start":463,"line_end":463,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":0,"byte_end":16497,"line_start":1,"line_end":505,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":66},{"krate":0,"index":126},{"krate":0,"index":269},{"krate":0,"index":616},{"krate":0,"index":904},{"krate":0,"index":950},{"krate":0,"index":1079},{"krate":0,"index":1302},{"krate":0,"index":1583},{"krate":0,"index":1696},{"krate":0,"index":1938},{"krate":0,"index":1939}],"decl_id":null,"docs":" # nom, eating data byte by byte","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":14309,"byte_end":14331,"line_start":405,"line_end":405,"column_start":1,"column_end":23}},{"value":"warn(missing_doc_code_examples)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":14332,"byte_end":14367,"line_start":406,"line_end":406,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":14953,"byte_end":14956,"line_start":427,"line_end":427,"column_start":9,"column_end":12},"name":"lib","qualname":"::lib","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does\n it, albeit there it is not public.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":15},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15602,"byte_end":15605,"line_start":447,"line_end":447,"column_start":11,"column_end":14},"name":"std","qualname":"::lib::std","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":34}],"decl_id":null,"docs":" internal std exports for no_std compatibility\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15516,"byte_end":15539,"line_start":445,"line_end":445,"column_start":3,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":15821,"byte_end":15828,"line_start":454,"line_end":454,"column_start":13,"column_end":20},"name":"prelude","qualname":"::lib::std::prelude","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","parent":null,"children":[{"krate":0,"index":35}],"decl_id":null,"docs":" internal reproduction of std prelude\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/util.rs","byte_start":16685,"byte_end":16695,"line_start":8,"line_end":8,"column_start":11,"column_end":21},"name":"HexDisplay","qualname":"::util::HexDisplay","value":"HexDisplay","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Helper trait to show a byte slice as a hex dump\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/util.rs","byte_start":16599,"byte_end":16622,"line_start":6,"line_end":6,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/util.rs","byte_start":16787,"byte_end":16793,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"name":"to_hex","qualname":"::util::HexDisplay::to_hex","value":"fn (&self, chunk_size: usize) -> String","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump, returning the owned\n string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/util.rs","byte_start":16949,"byte_end":16960,"line_start":15,"line_end":15,"column_start":6,"column_end":17},"name":"to_hex_from","qualname":"::util::HexDisplay::to_hex_from","value":"fn (&self, chunk_size: usize, from: usize) -> String","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\n string.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/util.rs","byte_start":20390,"byte_end":20397,"line_start":160,"line_end":160,"column_start":8,"column_end":15},"name":"dbg_dmp","qualname":"::util::dbg_dmp","value":"fn <'a, F, O, E> (f: F, context: &'static str) -> impl Fn(&'a [u8]) -> IResult<&'a [u8], O, E>","parent":null,"children":[],"decl_id":null,"docs":" Prints a message and the input if the parser fails","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/util.rs","byte_start":20359,"byte_end":20382,"line_start":159,"line_end":159,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":2204},{"krate":0,"index":2214},{"krate":0,"index":2211},{"krate":0,"index":2207},{"krate":0,"index":2217},{"krate":0,"index":2232},{"krate":0,"index":2230},{"krate":0,"index":2227},{"krate":0,"index":95},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":113},{"krate":0,"index":2234},{"krate":0,"index":2349},{"krate":0,"index":2347},{"krate":0,"index":2345},{"krate":0,"index":2342},{"krate":0,"index":2340},{"krate":0,"index":2339},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" Error management","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16123,"byte_end":16135,"line_start":475,"line_end":475,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":22293,"byte_end":22303,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"ParseError","qualname":"::error::ParseError","value":"ParseError<I>: Sized","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" this trait must be implemented by the error type of a nom parser","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":22387,"byte_end":22402,"line_start":17,"line_end":17,"column_start":6,"column_end":21},"name":"from_error_kind","qualname":"::error::ParseError::from_error_kind","value":"fn (input: I, kind: ErrorKind) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" creates an error from the input position and an [ErrorKind]\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":22650,"byte_end":22656,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"append","qualname":"::error::ParseError::append","value":"fn (input: I, kind: ErrorKind, other: Self) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" combines an existing error with a new one created from the input\n position and an [ErrorKind]. This is useful when backtracking\n through a parse tree, accumulating error context on the way\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":22784,"byte_end":22793,"line_start":25,"line_end":25,"column_start":6,"column_end":15},"name":"from_char","qualname":"::error::ParseError::from_char","value":"fn (input: I, _: char) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" creates an error from an input position and an expected character\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":23003,"byte_end":23005,"line_start":31,"line_end":31,"column_start":6,"column_end":8},"name":"or","qualname":"::error::ParseError::or","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" combines two existing error. This function is used to compare errors\n generated in various branches of [alt]\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":23165,"byte_end":23177,"line_start":38,"line_end":38,"column_start":11,"column_end":23},"name":"ContextError","qualname":"::error::ContextError","value":"ContextError<I>: Sized","parent":null,"children":[{"krate":0,"index":76}],"decl_id":null,"docs":" this trait is required by the `context` combinator to add a static string\n to an existing error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":23426,"byte_end":23437,"line_start":42,"line_end":42,"column_start":6,"column_end":17},"name":"add_context","qualname":"::error::ContextError::add_context","value":"fn (_input: I, _ctx: &'static str, other: Self) -> Self","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" create a new error from an input position, a static string and an existing error.\n This is used mainly in the [context] combinator, to add user friendly information\n to errors when backtracking through a parse tree\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":23997,"byte_end":24007,"line_start":68,"line_end":68,"column_start":8,"column_end":18},"name":"make_error","qualname":"::error::make_error","value":"fn <I, E> (input: I, kind: ErrorKind) -> E","parent":null,"children":[],"decl_id":null,"docs":" creates an error from the input position and an [ErrorKind]\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":24306,"byte_end":24318,"line_start":75,"line_end":75,"column_start":8,"column_end":20},"name":"append_error","qualname":"::error::append_error","value":"fn <I, E> (input: I, kind: ErrorKind, other: E) -> E","parent":null,"children":[],"decl_id":null,"docs":" combines an existing error with a new one created from the input\n position and an [ErrorKind]. This is useful when backtracking\n through a parse tree, accumulating error context on the way\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2204},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":24703,"byte_end":24715,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"VerboseError","qualname":"::error::VerboseError","value":"VerboseError { errors }","parent":null,"children":[{"krate":0,"index":2206}],"decl_id":null,"docs":" this error type accumulates errors and their position when backtracking\n through a parse tree. With some post processing (cf `examples/json.rs`),\n it can be used to display user friendly error messages\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":24631,"byte_end":24656,"line_start":82,"line_end":82,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2206},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":24846,"byte_end":24852,"line_start":87,"line_end":87,"column_start":7,"column_end":13},"name":"errors","qualname":"::error::VerboseError::errors","value":"std::vec::Vec<(I, error::VerboseErrorKind)>","parent":{"krate":0,"index":2204},"children":[],"decl_id":null,"docs":" list of errors accumulated by `VerboseError`, containing the affected\n part of input data, and some context\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2218},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25087,"byte_end":25094,"line_start":95,"line_end":95,"column_start":3,"column_end":10},"name":"Context","qualname":"::error::VerboseErrorKind::Context","value":"VerboseErrorKind::Context(&'static str)","parent":{"krate":0,"index":2217},"children":[],"decl_id":null,"docs":" static string added by the `context` function\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2221},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25180,"byte_end":25184,"line_start":97,"line_end":97,"column_start":3,"column_end":7},"name":"Char","qualname":"::error::VerboseErrorKind::Char","value":"VerboseErrorKind::Char(char)","parent":{"krate":0,"index":2217},"children":[],"decl_id":null,"docs":" indicates which character was expected by the `char` function\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2224},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25240,"byte_end":25243,"line_start":99,"line_end":99,"column_start":3,"column_end":6},"name":"Nom","qualname":"::error::VerboseErrorKind::Nom","value":"VerboseErrorKind::Nom(ErrorKind)","parent":{"krate":0,"index":2217},"children":[],"decl_id":null,"docs":" error kind given by various nom parsers\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2217},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25014,"byte_end":25030,"line_start":93,"line_end":93,"column_start":10,"column_end":26},"name":"VerboseErrorKind","qualname":"::error::VerboseErrorKind","value":"VerboseErrorKind::{Context, Char, Nom}","parent":null,"children":[{"krate":0,"index":2218},{"krate":0,"index":2221},{"krate":0,"index":2224}],"decl_id":null,"docs":" error context for `VerboseError`\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":24907,"byte_end":24932,"line_start":90,"line_end":90,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":26245,"byte_end":26252,"line_start":135,"line_end":135,"column_start":8,"column_end":15},"name":"context","qualname":"::error::context","value":"fn <I, E, F, O> (context: &'static str, mut f: F) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" create a new error from an input position, a static string and an existing error.\n This is used mainly in the [context] combinator, to add user friendly information\n to errors when backtracking through a parse tree\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":113},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":26782,"byte_end":26795,"line_start":152,"line_end":152,"column_start":8,"column_end":21},"name":"convert_error","qualname":"::error::convert_error","value":"fn (input: &str, e: VerboseError<&str>) -> crate::lib::std::string::String","parent":null,"children":[],"decl_id":null,"docs":" transforms a `VerboseError` into a trace with input position information\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":26749,"byte_end":26774,"line_start":151,"line_end":151,"column_start":1,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2235},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30296,"byte_end":30299,"line_start":265,"line_end":265,"column_start":3,"column_end":6},"name":"Tag","qualname":"::error::ErrorKind::Tag","value":"ErrorKind::Tag","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2237},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30303,"byte_end":30309,"line_start":266,"line_end":266,"column_start":3,"column_end":9},"name":"MapRes","qualname":"::error::ErrorKind::MapRes","value":"ErrorKind::MapRes","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2239},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30313,"byte_end":30319,"line_start":267,"line_end":267,"column_start":3,"column_end":9},"name":"MapOpt","qualname":"::error::ErrorKind::MapOpt","value":"ErrorKind::MapOpt","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2241},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30323,"byte_end":30326,"line_start":268,"line_end":268,"column_start":3,"column_end":6},"name":"Alt","qualname":"::error::ErrorKind::Alt","value":"ErrorKind::Alt","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2243},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30330,"byte_end":30335,"line_start":269,"line_end":269,"column_start":3,"column_end":8},"name":"IsNot","qualname":"::error::ErrorKind::IsNot","value":"ErrorKind::IsNot","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2245},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30339,"byte_end":30342,"line_start":270,"line_end":270,"column_start":3,"column_end":6},"name":"IsA","qualname":"::error::ErrorKind::IsA","value":"ErrorKind::IsA","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2247},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30346,"byte_end":30359,"line_start":271,"line_end":271,"column_start":3,"column_end":16},"name":"SeparatedList","qualname":"::error::ErrorKind::SeparatedList","value":"ErrorKind::SeparatedList","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2249},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30363,"byte_end":30384,"line_start":272,"line_end":272,"column_start":3,"column_end":24},"name":"SeparatedNonEmptyList","qualname":"::error::ErrorKind::SeparatedNonEmptyList","value":"ErrorKind::SeparatedNonEmptyList","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2251},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30388,"byte_end":30393,"line_start":273,"line_end":273,"column_start":3,"column_end":8},"name":"Many0","qualname":"::error::ErrorKind::Many0","value":"ErrorKind::Many0","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2253},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30397,"byte_end":30402,"line_start":274,"line_end":274,"column_start":3,"column_end":8},"name":"Many1","qualname":"::error::ErrorKind::Many1","value":"ErrorKind::Many1","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2255},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30406,"byte_end":30414,"line_start":275,"line_end":275,"column_start":3,"column_end":11},"name":"ManyTill","qualname":"::error::ErrorKind::ManyTill","value":"ErrorKind::ManyTill","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2257},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30418,"byte_end":30423,"line_start":276,"line_end":276,"column_start":3,"column_end":8},"name":"Count","qualname":"::error::ErrorKind::Count","value":"ErrorKind::Count","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2259},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30427,"byte_end":30436,"line_start":277,"line_end":277,"column_start":3,"column_end":12},"name":"TakeUntil","qualname":"::error::ErrorKind::TakeUntil","value":"ErrorKind::TakeUntil","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2261},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30440,"byte_end":30451,"line_start":278,"line_end":278,"column_start":3,"column_end":14},"name":"LengthValue","qualname":"::error::ErrorKind::LengthValue","value":"ErrorKind::LengthValue","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2263},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30455,"byte_end":30465,"line_start":279,"line_end":279,"column_start":3,"column_end":13},"name":"TagClosure","qualname":"::error::ErrorKind::TagClosure","value":"ErrorKind::TagClosure","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2265},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30469,"byte_end":30474,"line_start":280,"line_end":280,"column_start":3,"column_end":8},"name":"Alpha","qualname":"::error::ErrorKind::Alpha","value":"ErrorKind::Alpha","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2267},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30478,"byte_end":30483,"line_start":281,"line_end":281,"column_start":3,"column_end":8},"name":"Digit","qualname":"::error::ErrorKind::Digit","value":"ErrorKind::Digit","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2269},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30487,"byte_end":30495,"line_start":282,"line_end":282,"column_start":3,"column_end":11},"name":"HexDigit","qualname":"::error::ErrorKind::HexDigit","value":"ErrorKind::HexDigit","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2271},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30499,"byte_end":30507,"line_start":283,"line_end":283,"column_start":3,"column_end":11},"name":"OctDigit","qualname":"::error::ErrorKind::OctDigit","value":"ErrorKind::OctDigit","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2273},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30511,"byte_end":30523,"line_start":284,"line_end":284,"column_start":3,"column_end":15},"name":"AlphaNumeric","qualname":"::error::ErrorKind::AlphaNumeric","value":"ErrorKind::AlphaNumeric","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2275},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30527,"byte_end":30532,"line_start":285,"line_end":285,"column_start":3,"column_end":8},"name":"Space","qualname":"::error::ErrorKind::Space","value":"ErrorKind::Space","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2277},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30536,"byte_end":30546,"line_start":286,"line_end":286,"column_start":3,"column_end":13},"name":"MultiSpace","qualname":"::error::ErrorKind::MultiSpace","value":"ErrorKind::MultiSpace","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2279},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30550,"byte_end":30563,"line_start":287,"line_end":287,"column_start":3,"column_end":16},"name":"LengthValueFn","qualname":"::error::ErrorKind::LengthValueFn","value":"ErrorKind::LengthValueFn","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2281},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30567,"byte_end":30570,"line_start":288,"line_end":288,"column_start":3,"column_end":6},"name":"Eof","qualname":"::error::ErrorKind::Eof","value":"ErrorKind::Eof","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2283},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30574,"byte_end":30580,"line_start":289,"line_end":289,"column_start":3,"column_end":9},"name":"Switch","qualname":"::error::ErrorKind::Switch","value":"ErrorKind::Switch","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2285},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30584,"byte_end":30591,"line_start":290,"line_end":290,"column_start":3,"column_end":10},"name":"TagBits","qualname":"::error::ErrorKind::TagBits","value":"ErrorKind::TagBits","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2287},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30595,"byte_end":30600,"line_start":291,"line_end":291,"column_start":3,"column_end":8},"name":"OneOf","qualname":"::error::ErrorKind::OneOf","value":"ErrorKind::OneOf","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2289},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30604,"byte_end":30610,"line_start":292,"line_end":292,"column_start":3,"column_end":9},"name":"NoneOf","qualname":"::error::ErrorKind::NoneOf","value":"ErrorKind::NoneOf","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2291},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30614,"byte_end":30618,"line_start":293,"line_end":293,"column_start":3,"column_end":7},"name":"Char","qualname":"::error::ErrorKind::Char","value":"ErrorKind::Char","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2293},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30622,"byte_end":30626,"line_start":294,"line_end":294,"column_start":3,"column_end":7},"name":"CrLf","qualname":"::error::ErrorKind::CrLf","value":"ErrorKind::CrLf","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2295},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30630,"byte_end":30641,"line_start":295,"line_end":295,"column_start":3,"column_end":14},"name":"RegexpMatch","qualname":"::error::ErrorKind::RegexpMatch","value":"ErrorKind::RegexpMatch","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2297},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30645,"byte_end":30658,"line_start":296,"line_end":296,"column_start":3,"column_end":16},"name":"RegexpMatches","qualname":"::error::ErrorKind::RegexpMatches","value":"ErrorKind::RegexpMatches","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2299},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30662,"byte_end":30672,"line_start":297,"line_end":297,"column_start":3,"column_end":13},"name":"RegexpFind","qualname":"::error::ErrorKind::RegexpFind","value":"ErrorKind::RegexpFind","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2301},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30676,"byte_end":30689,"line_start":298,"line_end":298,"column_start":3,"column_end":16},"name":"RegexpCapture","qualname":"::error::ErrorKind::RegexpCapture","value":"ErrorKind::RegexpCapture","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2303},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30693,"byte_end":30707,"line_start":299,"line_end":299,"column_start":3,"column_end":17},"name":"RegexpCaptures","qualname":"::error::ErrorKind::RegexpCaptures","value":"ErrorKind::RegexpCaptures","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2305},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30711,"byte_end":30721,"line_start":300,"line_end":300,"column_start":3,"column_end":13},"name":"TakeWhile1","qualname":"::error::ErrorKind::TakeWhile1","value":"ErrorKind::TakeWhile1","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2307},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30725,"byte_end":30733,"line_start":301,"line_end":301,"column_start":3,"column_end":11},"name":"Complete","qualname":"::error::ErrorKind::Complete","value":"ErrorKind::Complete","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2309},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30737,"byte_end":30740,"line_start":302,"line_end":302,"column_start":3,"column_end":6},"name":"Fix","qualname":"::error::ErrorKind::Fix","value":"ErrorKind::Fix","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2311},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30744,"byte_end":30751,"line_start":303,"line_end":303,"column_start":3,"column_end":10},"name":"Escaped","qualname":"::error::ErrorKind::Escaped","value":"ErrorKind::Escaped","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2313},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30755,"byte_end":30771,"line_start":304,"line_end":304,"column_start":3,"column_end":19},"name":"EscapedTransform","qualname":"::error::ErrorKind::EscapedTransform","value":"ErrorKind::EscapedTransform","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2315},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30775,"byte_end":30783,"line_start":305,"line_end":305,"column_start":3,"column_end":11},"name":"NonEmpty","qualname":"::error::ErrorKind::NonEmpty","value":"ErrorKind::NonEmpty","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2317},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30787,"byte_end":30793,"line_start":306,"line_end":306,"column_start":3,"column_end":9},"name":"ManyMN","qualname":"::error::ErrorKind::ManyMN","value":"ErrorKind::ManyMN","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2319},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30797,"byte_end":30800,"line_start":307,"line_end":307,"column_start":3,"column_end":6},"name":"Not","qualname":"::error::ErrorKind::Not","value":"ErrorKind::Not","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2321},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30804,"byte_end":30815,"line_start":308,"line_end":308,"column_start":3,"column_end":14},"name":"Permutation","qualname":"::error::ErrorKind::Permutation","value":"ErrorKind::Permutation","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2323},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30819,"byte_end":30825,"line_start":309,"line_end":309,"column_start":3,"column_end":9},"name":"Verify","qualname":"::error::ErrorKind::Verify","value":"ErrorKind::Verify","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2325},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30829,"byte_end":30838,"line_start":310,"line_end":310,"column_start":3,"column_end":12},"name":"TakeTill1","qualname":"::error::ErrorKind::TakeTill1","value":"ErrorKind::TakeTill1","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2327},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30842,"byte_end":30853,"line_start":311,"line_end":311,"column_start":3,"column_end":14},"name":"TakeWhileMN","qualname":"::error::ErrorKind::TakeWhileMN","value":"ErrorKind::TakeWhileMN","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2329},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30857,"byte_end":30864,"line_start":312,"line_end":312,"column_start":3,"column_end":10},"name":"ParseTo","qualname":"::error::ErrorKind::ParseTo","value":"ErrorKind::ParseTo","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2331},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30868,"byte_end":30876,"line_start":313,"line_end":313,"column_start":3,"column_end":11},"name":"TooLarge","qualname":"::error::ErrorKind::TooLarge","value":"ErrorKind::TooLarge","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2333},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30880,"byte_end":30890,"line_start":314,"line_end":314,"column_start":3,"column_end":13},"name":"Many0Count","qualname":"::error::ErrorKind::Many0Count","value":"ErrorKind::Many0Count","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2335},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30894,"byte_end":30904,"line_start":315,"line_end":315,"column_start":3,"column_end":13},"name":"Many1Count","qualname":"::error::ErrorKind::Many1Count","value":"ErrorKind::Many1Count","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2337},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30908,"byte_end":30913,"line_start":316,"line_end":316,"column_start":3,"column_end":8},"name":"Float","qualname":"::error::ErrorKind::Float","value":"ErrorKind::Float","parent":{"krate":0,"index":2234},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2234},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30282,"byte_end":30291,"line_start":264,"line_end":264,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"ErrorKind::{Tag, MapRes, MapOpt, Alt, IsNot, IsA, SeparatedList, SeparatedNonEmptyList, Many0, Many1, ManyTill, Count, TakeUntil, LengthValue, TagClosure, Alpha, Digit, HexDigit, OctDigit, AlphaNumeric, Space, MultiSpace, LengthValueFn, Eof, Switch, TagBits, OneOf, NoneOf, Char, CrLf, RegexpMatch, RegexpMatches, RegexpFind, RegexpCapture, RegexpCaptures, TakeWhile1, Complete, Fix, Escaped, EscapedTransform, NonEmpty, ManyMN, Not, Permutation, Verify, TakeTill1, TakeWhileMN, ParseTo, TooLarge, Many0Count, Many1Count, Float}","parent":null,"children":[{"krate":0,"index":2235},{"krate":0,"index":2237},{"krate":0,"index":2239},{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":2245},{"krate":0,"index":2247},{"krate":0,"index":2249},{"krate":0,"index":2251},{"krate":0,"index":2253},{"krate":0,"index":2255},{"krate":0,"index":2257},{"krate":0,"index":2259},{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2265},{"krate":0,"index":2267},{"krate":0,"index":2269},{"krate":0,"index":2271},{"krate":0,"index":2273},{"krate":0,"index":2275},{"krate":0,"index":2277},{"krate":0,"index":2279},{"krate":0,"index":2281},{"krate":0,"index":2283},{"krate":0,"index":2285},{"krate":0,"index":2287},{"krate":0,"index":2289},{"krate":0,"index":2291},{"krate":0,"index":2293},{"krate":0,"index":2295},{"krate":0,"index":2297},{"krate":0,"index":2299},{"krate":0,"index":2301},{"krate":0,"index":2303},{"krate":0,"index":2305},{"krate":0,"index":2307},{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2319},{"krate":0,"index":2321},{"krate":0,"index":2323},{"krate":0,"index":2325},{"krate":0,"index":2327},{"krate":0,"index":2329},{"krate":0,"index":2331},{"krate":0,"index":2333},{"krate":0,"index":2335},{"krate":0,"index":2337}],"decl_id":null,"docs":" indicates which parser returned an error\n","sig":null,"attributes":[{"value":"allow(deprecated, missing_docs)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30239,"byte_end":30272,"line_start":263,"line_end":263,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":31019,"byte_end":31031,"line_start":322,"line_end":322,"column_start":8,"column_end":20},"name":"error_to_u32","qualname":"::error::error_to_u32","value":"fn (e: &ErrorKind) -> u32","parent":null,"children":[],"decl_id":null,"docs":" converts an ErrorKind to a number\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":30953,"byte_end":30973,"line_start":320,"line_end":320,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":33699,"byte_end":33710,"line_start":383,"line_end":383,"column_start":10,"column_end":21},"name":"description","qualname":"<ErrorKind>::description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" converts an ErrorKind to a text description\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":33619,"byte_end":33639,"line_start":381,"line_end":381,"column_start":3,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":130},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47100,"byte_end":47107,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"IResult","qualname":"::internal::IResult","value":"Result<(I, O), Err<E>>","parent":null,"children":[],"decl_id":null,"docs":" Holds the result of parsing functions","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2352},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47351,"byte_end":47358,"line_start":20,"line_end":20,"column_start":3,"column_end":10},"name":"Unknown","qualname":"::internal::Needed::Unknown","value":"Needed::Unknown","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" needs more data, but we do not know how much\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2354},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47400,"byte_end":47404,"line_start":22,"line_end":22,"column_start":3,"column_end":7},"name":"Size","qualname":"::internal::Needed::Size","value":"Needed::Size(NonZeroUsize)","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" contains the required data size\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2351},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47289,"byte_end":47295,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Needed","qualname":"::internal::Needed","value":"Needed::{Unknown, Size}","parent":null,"children":[{"krate":0,"index":2352},{"krate":0,"index":2354}],"decl_id":null,"docs":" Contains information on needed data if a parser returned `Incomplete`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47527,"byte_end":47530,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"new","qualname":"<Needed>::new","value":"fn (s: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" creates Needed instance, returns `Needed::Unknown` if the argument is zero\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47721,"byte_end":47729,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"name":"is_known","qualname":"<Needed>::is_known","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" indicates if we know how many bytes we need\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47880,"byte_end":47883,"line_start":41,"line_end":41,"column_start":10,"column_end":13},"name":"map","qualname":"<Needed>::map","value":"fn <F> (self, f: F) -> Needed","parent":null,"children":[],"decl_id":null,"docs":" Maps a `Needed` to `Needed` by applying a function to a contained `Size` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47861,"byte_end":47870,"line_start":40,"line_end":40,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2369},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":48919,"byte_end":48929,"line_start":66,"line_end":66,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::internal::Err::Incomplete","value":"Err::Incomplete(Needed)","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" There was not enough data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2372},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":48985,"byte_end":48990,"line_start":68,"line_end":68,"column_start":3,"column_end":8},"name":"Error","qualname":"::internal::Err::Error","value":"Err::Error(E)","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" The parser had an error (recoverable)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2375},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49153,"byte_end":49160,"line_start":72,"line_end":72,"column_start":3,"column_end":10},"name":"Failure","qualname":"::internal::Err::Failure","value":"Err::Failure(E)","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" The parser had an unrecoverable error: we got to the right\n branch and we know other branches won't work, so backtrack\n as fast as possible\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2367},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":48876,"byte_end":48879,"line_start":64,"line_end":64,"column_start":10,"column_end":13},"name":"Err","qualname":"::internal::Err","value":"Err::{Incomplete, Error, Failure}","parent":null,"children":[{"krate":0,"index":2369},{"krate":0,"index":2372},{"krate":0,"index":2375}],"decl_id":null,"docs":" The `Err` enum indicates the parser was not successful","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49234,"byte_end":49247,"line_start":77,"line_end":77,"column_start":10,"column_end":23},"name":"is_incomplete","qualname":"<Err<E>>::is_incomplete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" tests if the result is Incomplete\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49412,"byte_end":49415,"line_start":86,"line_end":86,"column_start":10,"column_end":13},"name":"map","qualname":"<Err<E>>::map","value":"fn <E2, F> (self, f: F) -> Err<E2>","parent":null,"children":[],"decl_id":null,"docs":" Applies the given function to the inner error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49732,"byte_end":49739,"line_start":98,"line_end":98,"column_start":10,"column_end":17},"name":"convert","qualname":"<Err<E>>::convert","value":"fn <F> (e: Err<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" automatically converts between errors if the underlying type supports it\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49941,"byte_end":49950,"line_start":108,"line_end":108,"column_start":10,"column_end":19},"name":"map_input","qualname":"<Err<(T, ErrorKind)>>::map_input","value":"fn <U, F> (self, f: F) -> Err<(U, ErrorKind)>","parent":null,"children":[],"decl_id":null,"docs":" maps `Err<(T, ErrorKind)>` to `Err<(U, ErrorKind)>` with the given F: T -> U\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50317,"byte_end":50325,"line_start":123,"line_end":123,"column_start":10,"column_end":18},"name":"to_owned","qualname":"<Err<(&'_ [u8], ErrorKind)>>::to_owned","value":"fn (self) -> Err<(Vec<u8>, ErrorKind)>","parent":null,"children":[],"decl_id":null,"docs":" Obtaining ownership\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50550,"byte_end":50558,"line_start":131,"line_end":131,"column_start":10,"column_end":18},"name":"to_owned","qualname":"<Err<(&'_ str, ErrorKind)>>::to_owned","value":"fn (self) -> Err<(String, ErrorKind)>","parent":null,"children":[],"decl_id":null,"docs":" automatically converts between errors if the underlying type supports it\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":166},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":51441,"byte_end":51447,"line_start":170,"line_end":170,"column_start":11,"column_end":17},"name":"Parser","qualname":"::internal::Parser","value":"Parser<I, O, E>","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184}],"decl_id":null,"docs":" all nom parsers implement ths trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":51601,"byte_end":51606,"line_start":173,"line_end":173,"column_start":6,"column_end":11},"name":"parse","qualname":"::internal::Parser::parse","value":"fn (&mut self, input: I) -> IResult<I, O, E>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" a parser takes in input type, and returns a `Result` containing\n either the remaining input and the output value, or an error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":51705,"byte_end":51708,"line_start":176,"line_end":176,"column_start":6,"column_end":9},"name":"map","qualname":"::internal::Parser::map","value":"fn <G, O2> (self, g: G) -> Map<Self, G, O>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" maps a function over the result of a parser\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":52004,"byte_end":52012,"line_start":189,"line_end":189,"column_start":6,"column_end":14},"name":"flat_map","qualname":"::internal::Parser::flat_map","value":"fn <G, H, O2> (self, g: G) -> FlatMap<Self, G, O>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" creates a second parser from the output of the first one, then apply over the rest of the input\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":52304,"byte_end":52312,"line_start":203,"line_end":203,"column_start":6,"column_end":14},"name":"and_then","qualname":"::internal::Parser::and_then","value":"fn <G, O2> (self, g: G) -> AndThen<Self, G, O>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" applies a second parser over the output of the first one\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":52602,"byte_end":52605,"line_start":216,"line_end":216,"column_start":6,"column_end":9},"name":"and","qualname":"::internal::Parser::and","value":"fn <G, O2> (self, g: G) -> And<Self, G>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" applies a second parser after the first one, return their results as a tuple\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":52811,"byte_end":52813,"line_start":225,"line_end":225,"column_start":6,"column_end":8},"name":"or","qualname":"::internal::Parser::or","value":"fn <G> (self, g: G) -> Or<Self, G>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" applies a second parser over the input if the first one failed\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":193},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":53146,"byte_end":53149,"line_start":244,"line_end":244,"column_start":12,"column_end":15},"name":"Map","qualname":"::internal::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"decl_id":null,"docs":" implementation of Parser:::map\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":209},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":53529,"byte_end":53536,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::internal::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"decl_id":null,"docs":" implementation of Parser::flat_map\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":53904,"byte_end":53911,"line_start":276,"line_end":276,"column_start":12,"column_end":19},"name":"AndThen","qualname":"::internal::AndThen","value":"AndThen {  }","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"decl_id":null,"docs":" implementation of Parser::and_then\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":242},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54286,"byte_end":54289,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"name":"And","qualname":"::internal::And","value":"And {  }","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246}],"decl_id":null,"docs":" implementation of Parser::and\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54625,"byte_end":54627,"line_start":309,"line_end":309,"column_start":12,"column_end":14},"name":"Or","qualname":"::internal::Or","value":"Or {  }","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260}],"decl_id":null,"docs":" implementation of Parser::or\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":56336,"byte_end":56347,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"InputLength","qualname":"::traits::InputLength","value":"InputLength","parent":null,"children":[{"krate":0,"index":293}],"decl_id":null,"docs":" abstract method to calculate the input length\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":56455,"byte_end":56464,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"name":"input_len","qualname":"::traits::InputLength::input_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" calculates the input length, as indicated by its name,\n and the name of the trait itself\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":304},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":57039,"byte_end":57045,"line_start":51,"line_end":51,"column_start":11,"column_end":17},"name":"Offset","qualname":"::traits::Offset","value":"Offset","parent":null,"children":[{"krate":0,"index":305}],"decl_id":null,"docs":" useful functions to calculate the offset between slices and show a hexdump of a slice\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":57132,"byte_end":57138,"line_start":53,"line_end":53,"column_start":6,"column_end":12},"name":"offset","qualname":"::traits::Offset::offset","value":"fn (&self, second: &Self) -> usize","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" offset between the first byte of self and the first byte of the argument\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":316},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":57932,"byte_end":57939,"line_start":93,"line_end":93,"column_start":11,"column_end":18},"name":"AsBytes","qualname":"::traits::AsBytes","value":"AsBytes","parent":null,"children":[{"krate":0,"index":317}],"decl_id":null,"docs":" Helper trait for types that can be viewed as a byte slice\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":57990,"byte_end":57998,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"name":"as_bytes","qualname":"::traits::AsBytes::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" casts the input type to a byte slice\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":329},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59004,"byte_end":59010,"line_start":154,"line_end":154,"column_start":11,"column_end":17},"name":"AsChar","qualname":"::traits::AsChar","value":"AsChar","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"decl_id":null,"docs":" transforms common types to a char for basic token parsing\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59047,"byte_end":59054,"line_start":156,"line_end":156,"column_start":6,"column_end":13},"name":"as_char","qualname":"::traits::AsChar::as_char","value":"fn (self) -> char","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" makes a char from self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59231,"byte_end":59239,"line_start":162,"line_end":162,"column_start":6,"column_end":14},"name":"is_alpha","qualname":"::traits::AsChar::is_alpha","value":"fn (self) -> bool","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59335,"byte_end":59346,"line_start":166,"line_end":166,"column_start":6,"column_end":17},"name":"is_alphanum","qualname":"::traits::AsChar::is_alphanum","value":"fn (self) -> bool","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character\n or a decimal digit\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59408,"byte_end":59420,"line_start":168,"line_end":168,"column_start":6,"column_end":18},"name":"is_dec_digit","qualname":"::traits::AsChar::is_dec_digit","value":"fn (self) -> bool","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" tests that self is a decimal digit\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59479,"byte_end":59491,"line_start":170,"line_end":170,"column_start":6,"column_end":18},"name":"is_hex_digit","qualname":"::traits::AsChar::is_hex_digit","value":"fn (self) -> bool","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" tests that self is an hex digit\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59552,"byte_end":59564,"line_start":172,"line_end":172,"column_start":6,"column_end":18},"name":"is_oct_digit","qualname":"::traits::AsChar::is_oct_digit","value":"fn (self) -> bool","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" tests that self is an octal digit\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":59622,"byte_end":59625,"line_start":174,"line_end":174,"column_start":6,"column_end":9},"name":"len","qualname":"::traits::AsChar::len","value":"fn (self) -> usize","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" gets the len in bytes for self\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":371},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":62164,"byte_end":62173,"line_start":305,"line_end":305,"column_start":11,"column_end":20},"name":"InputIter","qualname":"::traits::InputIter","value":"InputIter","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379}],"decl_id":null,"docs":" abstracts common iteration operations on the input type\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":372},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":62305,"byte_end":62309,"line_start":309,"line_end":309,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputIter::Item","value":"type Item;","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" the current input type is a sequence of that `Item` type.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":373},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":62519,"byte_end":62523,"line_start":313,"line_end":313,"column_start":8,"column_end":12},"name":"Iter","qualname":"::traits::InputIter::Iter","value":"type Iter: Iterator<Item = (usize, Self::Item)>;","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" an iterator over the input type, producing the item and its position\n for use with [Slice]. If we're iterating over `&str`, the position\n corresponds to the byte index of the character\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":374},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":62629,"byte_end":62637,"line_start":316,"line_end":316,"column_start":8,"column_end":16},"name":"IterElem","qualname":"::traits::InputIter::IterElem","value":"type IterElem: Iterator<Item = Self::Item>;","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" an iterator over the input type, producing the item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":62741,"byte_end":62753,"line_start":319,"line_end":319,"column_start":6,"column_end":18},"name":"iter_indices","qualname":"::traits::InputIter::iter_indices","value":"fn (&self) -> Self::Iter","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" returns an iterator over the elements and their byte offsets\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":62825,"byte_end":62838,"line_start":321,"line_end":321,"column_start":6,"column_end":19},"name":"iter_elements","qualname":"::traits::InputIter::iter_elements","value":"fn (&self) -> Self::IterElem","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" returns an iterator over the elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":62915,"byte_end":62923,"line_start":323,"line_end":323,"column_start":6,"column_end":14},"name":"position","qualname":"::traits::InputIter::position","value":"fn <P> (&self, predicate: P) -> Option<usize>","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" finds the byte position of the element\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":63077,"byte_end":63088,"line_start":327,"line_end":327,"column_start":6,"column_end":17},"name":"slice_index","qualname":"::traits::InputIter::slice_index","value":"fn (&self, count: usize) -> Option<usize>","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" get the byte offset from the element's position in the stream\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":63174,"byte_end":63183,"line_start":331,"line_end":331,"column_start":11,"column_end":20},"name":"InputTake","qualname":"::traits::InputTake","value":"InputTake: Sized","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":" abstracts slicing operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":63263,"byte_end":63267,"line_start":333,"line_end":333,"column_start":6,"column_end":10},"name":"take","qualname":"::traits::InputTake::take","value":"fn (&self, count: usize) -> Self","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" returns a slice of `count` bytes. panics if count > length\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":63379,"byte_end":63389,"line_start":335,"line_end":335,"column_start":6,"column_end":16},"name":"take_split","qualname":"::traits::InputTake::take_split","value":"fn (&self, count: usize) -> (Self, Self)","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" split the stream at the `count` byte offset. panics if count > length\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":413},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":65957,"byte_end":65975,"line_start":445,"line_end":445,"column_start":11,"column_end":29},"name":"UnspecializedInput","qualname":"::traits::UnspecializedInput","value":"UnspecializedInput","parent":null,"children":[],"decl_id":null,"docs":" Dummy trait used for default implementations (currently only used for `InputTakeAtPosition` and `Compare`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":414},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":66172,"byte_end":66191,"line_start":450,"line_end":450,"column_start":11,"column_end":30},"name":"InputTakeAtPosition","qualname":"::traits::InputTakeAtPosition","value":"InputTakeAtPosition: Sized","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425}],"decl_id":null,"docs":" methods to take as much input as possible until the provided function returns true for the current element","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":415},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":66330,"byte_end":66334,"line_start":454,"line_end":454,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputTakeAtPosition::Item","value":"type Item;","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" the current input type is a sequence of that `Item` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":66590,"byte_end":66607,"line_start":460,"line_end":460,"column_start":6,"column_end":23},"name":"split_at_position","qualname":"::traits::InputTakeAtPosition::split_at_position","value":"fn <P, E> (&self, predicate: P) -> IResult<Self, Self, E>","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true,\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":67020,"byte_end":67038,"line_start":470,"line_end":470,"column_start":6,"column_end":24},"name":"split_at_position1","qualname":"::traits::InputTakeAtPosition::split_at_position1","value":"fn <P, E> (&self, predicate: P, e: ErrorKind) -> IResult<Self, Self, E>","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":67436,"byte_end":67462,"line_start":482,"line_end":482,"column_start":6,"column_end":32},"name":"split_at_position_complete","qualname":"::traits::InputTakeAtPosition::split_at_position_complete","value":"fn <P, E> (&self, predicate: P) -> IResult<Self, Self, E>","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true,\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":67890,"byte_end":67917,"line_start":495,"line_end":495,"column_start":6,"column_end":33},"name":"split_at_position1_complete","qualname":"::traits::InputTakeAtPosition::split_at_position1_complete","value":"fn <P, E> (&self, predicate: P, e: ErrorKind) -> IResult<Self, Self, E>","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2620},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":73000,"byte_end":73002,"line_start":699,"line_end":699,"column_start":3,"column_end":5},"name":"Ok","qualname":"::traits::CompareResult::Ok","value":"CompareResult::Ok","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" comparison was successful\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2622},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":73041,"byte_end":73051,"line_start":701,"line_end":701,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::traits::CompareResult::Incomplete","value":"CompareResult::Incomplete","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" we need more data to be sure\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2624},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":73079,"byte_end":73084,"line_start":703,"line_end":703,"column_start":3,"column_end":8},"name":"Error","qualname":"::traits::CompareResult::Error","value":"CompareResult::Error","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" comparison failed\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2619},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":72950,"byte_end":72963,"line_start":697,"line_end":697,"column_start":10,"column_end":23},"name":"CompareResult","qualname":"::traits::CompareResult","value":"CompareResult::{Ok, Incomplete, Error}","parent":null,"children":[{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2624}],"decl_id":null,"docs":" indicates wether a comparison was successful, an error, or\n if more data was needed\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":73135,"byte_end":73142,"line_start":707,"line_end":707,"column_start":11,"column_end":18},"name":"Compare","qualname":"::traits::Compare","value":"Compare<T>","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480}],"decl_id":null,"docs":" abstracts comparison operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":73203,"byte_end":73210,"line_start":709,"line_end":709,"column_start":6,"column_end":13},"name":"compare","qualname":"::traits::Compare::compare","value":"fn (&self, t: T) -> CompareResult","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":73514,"byte_end":73529,"line_start":717,"line_end":717,"column_start":6,"column_end":21},"name":"compare_no_case","qualname":"::traits::Compare::compare_no_case","value":"fn (&self, t: T) -> CompareResult","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n independently of the case.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":508},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":77543,"byte_end":77552,"line_start":879,"line_end":879,"column_start":11,"column_end":20},"name":"FindToken","qualname":"::traits::FindToken","value":"FindToken<T>","parent":null,"children":[{"krate":0,"index":510}],"decl_id":null,"docs":" look for a token in self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":77609,"byte_end":77619,"line_start":881,"line_end":881,"column_start":6,"column_end":16},"name":"find_token","qualname":"::traits::FindToken::find_token","value":"fn (&self, token: T) -> bool","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" returns true if self contains the token\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":531},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":78606,"byte_end":78619,"line_start":931,"line_end":931,"column_start":11,"column_end":24},"name":"FindSubstring","qualname":"::traits::FindSubstring","value":"FindSubstring<T>","parent":null,"children":[{"krate":0,"index":533}],"decl_id":null,"docs":" look for a substring in self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":78694,"byte_end":78708,"line_start":933,"line_end":933,"column_start":6,"column_end":20},"name":"find_substring","qualname":"::traits::FindSubstring::find_substring","value":"fn (&self, substr: T) -> Option<usize>","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" returns the byte position of the substring if it is found\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":546},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":80038,"byte_end":80045,"line_start":987,"line_end":987,"column_start":11,"column_end":18},"name":"ParseTo","qualname":"::traits::ParseTo","value":"ParseTo<R>","parent":null,"children":[{"krate":0,"index":548}],"decl_id":null,"docs":" used to integrate str's parse() method\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":80198,"byte_end":80206,"line_start":990,"line_end":990,"column_start":6,"column_end":14},"name":"parse_to","qualname":"::traits::ParseTo::parse_to","value":"fn (&self) -> Option<R>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" succeeds if `parse()` succeeded. The byte slice implementation\n will first convert it to a &str, then apply the `parse()` function\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":558},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":80651,"byte_end":80656,"line_start":1010,"line_end":1010,"column_start":11,"column_end":16},"name":"Slice","qualname":"::traits::Slice","value":"Slice<R>","parent":null,"children":[{"krate":0,"index":560}],"decl_id":null,"docs":" slicing operations using ranges","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":80717,"byte_end":80722,"line_start":1012,"line_end":1012,"column_start":6,"column_end":11},"name":"slice","qualname":"::traits::Slice::slice","value":"fn (&self, range: R) -> Self","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":" slices self according to the range argument\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":565},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":83967,"byte_end":83977,"line_start":1142,"line_end":1142,"column_start":11,"column_end":21},"name":"ExtendInto","qualname":"::traits::ExtendInto","value":"ExtendInto","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"decl_id":null,"docs":" abstracts something which can extend an `Extend`\n used to build modified input slices in `escaped_transform`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":566},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":84109,"byte_end":84113,"line_start":1146,"line_end":1146,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::ExtendInto::Item","value":"type Item;","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" the current input type is a sequence of that `Item` type.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":567},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":84160,"byte_end":84168,"line_start":1149,"line_end":1149,"column_start":8,"column_end":16},"name":"Extender","qualname":"::traits::ExtendInto::Extender","value":"type Extender: Extend<Self::Item>;","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" the type that will be produced\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":84244,"byte_end":84255,"line_start":1152,"line_end":1152,"column_start":6,"column_end":17},"name":"new_builder","qualname":"::traits::ExtendInto::new_builder","value":"fn (&self) -> Self::Extender","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" create a new `Extend` of the correct type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":84334,"byte_end":84345,"line_start":1154,"line_end":1154,"column_start":6,"column_end":17},"name":"extend_into","qualname":"::traits::ExtendInto::extend_into","value":"fn (&self, acc: &mut Self::Extender) -> ()","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" accumulate the input into an accumulator\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":595},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":85994,"byte_end":86001,"line_start":1238,"line_end":1238,"column_start":11,"column_end":18},"name":"ToUsize","qualname":"::traits::ToUsize","value":"ToUsize","parent":null,"children":[{"krate":0,"index":596}],"decl_id":null,"docs":" Helper trait to convert numbers to usize","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":86038,"byte_end":86046,"line_start":1240,"line_end":1240,"column_start":6,"column_end":14},"name":"to_usize","qualname":"::traits::ToUsize::to_usize","value":"fn (&self) -> usize","parent":{"krate":0,"index":595},"children":[],"decl_id":null,"docs":" converts self to usize\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":607},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":86713,"byte_end":86725,"line_start":1281,"line_end":1281,"column_start":11,"column_end":23},"name":"ErrorConvert","qualname":"::traits::ErrorConvert","value":"ErrorConvert<E>","parent":null,"children":[{"krate":0,"index":609}],"decl_id":null,"docs":" equivalent From implementation to avoid orphan rules in bits parsers\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":86774,"byte_end":86781,"line_start":1283,"line_end":1283,"column_start":6,"column_end":13},"name":"convert","qualname":"::traits::ErrorConvert::convert","value":"fn (self) -> E","parent":{"krate":0,"index":607},"children":[],"decl_id":null,"docs":" transform to another error type\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":616},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"combinator","qualname":"::combinator","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":628},{"krate":0,"index":634},{"krate":0,"index":639},{"krate":0,"index":663},{"krate":0,"index":666},{"krate":0,"index":669},{"krate":0,"index":678},{"krate":0,"index":685},{"krate":0,"index":695},{"krate":0,"index":703},{"krate":0,"index":712},{"krate":0,"index":719},{"krate":0,"index":728},{"krate":0,"index":735},{"krate":0,"index":745},{"krate":0,"index":752},{"krate":0,"index":757},{"krate":0,"index":764},{"krate":0,"index":769},{"krate":0,"index":776},{"krate":0,"index":781},{"krate":0,"index":788},{"krate":0,"index":793},{"krate":0,"index":800},{"krate":0,"index":809},{"krate":0,"index":816},{"krate":0,"index":825},{"krate":0,"index":831},{"krate":0,"index":838},{"krate":0,"index":843},{"krate":0,"index":850},{"krate":0,"index":855},{"krate":0,"index":862},{"krate":0,"index":867},{"krate":0,"index":872},{"krate":0,"index":879},{"krate":0,"index":884},{"krate":0,"index":892}],"decl_id":null,"docs":" general purpose combinators\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16191,"byte_end":16203,"line_start":481,"line_end":481,"column_start":1,"column_end":13}},{"value":"allow(unused_imports)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":87656,"byte_end":87681,"line_start":3,"line_end":3,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":88444,"byte_end":88448,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"rest","qualname":"::combinator::rest","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Return the remaining input","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":88427,"byte_end":88436,"line_start":30,"line_end":30,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":88893,"byte_end":88901,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"rest_len","qualname":"::combinator::rest_len","value":"fn <T, E> (input: T) -> IResult<T, usize, E>","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the remaining input","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":88876,"byte_end":88885,"line_start":47,"line_end":47,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":89613,"byte_end":89616,"line_start":74,"line_end":74,"column_start":8,"column_end":11},"name":"map","qualname":"::combinator::map","value":"fn <I, O1, O2, E, F, G> (mut first: F, second: G) -> impl FnMut(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" maps a function on the result of a parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":89870,"byte_end":89874,"line_start":86,"line_end":86,"column_start":8,"column_end":12},"name":"mapc","qualname":"::combinator::mapc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":90804,"byte_end":90811,"line_start":115,"line_end":115,"column_start":8,"column_end":15},"name":"map_res","qualname":"::combinator::map_res","value":"fn <I, O1, O2, E, E2, F, G> (mut first: F, second: G) -> impl FnMut(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a function returning a Result over the result of a parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":91246,"byte_end":91254,"line_start":134,"line_end":134,"column_start":8,"column_end":16},"name":"map_resc","qualname":"::combinator::map_resc","value":"fn <I, O1, O2, E, E2, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":92235,"byte_end":92242,"line_start":167,"line_end":167,"column_start":8,"column_end":15},"name":"map_opt","qualname":"::combinator::map_opt","value":"fn <I, O1, O2, E, F, G> (mut first: F, second: G) -> impl FnMut(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a function returning an Option over the result of a parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":92669,"byte_end":92677,"line_start":186,"line_end":186,"column_start":8,"column_end":16},"name":"map_optc","qualname":"::combinator::map_optc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":93424,"byte_end":93434,"line_start":215,"line_end":215,"column_start":8,"column_end":18},"name":"map_parser","qualname":"::combinator::map_parser","value":"fn <I, O1, O2, E, F, G> (mut first: F, mut second: G) -> impl FnMut(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a parser over the result of another one","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":93774,"byte_end":93785,"line_start":232,"line_end":232,"column_start":8,"column_end":19},"name":"map_parserc","qualname":"::combinator::map_parserc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":94600,"byte_end":94608,"line_start":261,"line_end":261,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::combinator::flat_map","value":"fn <I, O1, O2, E, F, G, H> (mut first: F, second: G) -> impl FnMut(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" creates a new parser from the output of the first parser, then apply that parser over the rest of the input","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":95358,"byte_end":95361,"line_start":293,"line_end":293,"column_start":8,"column_end":11},"name":"opt","qualname":"::combinator::opt","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" optional parser: will return None if not successful","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":95695,"byte_end":95699,"line_start":308,"line_end":308,"column_start":8,"column_end":12},"name":"optc","qualname":"::combinator::optc","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":96468,"byte_end":96472,"line_start":334,"line_end":334,"column_start":8,"column_end":12},"name":"cond","qualname":"::combinator::cond","value":"fn <I, O, E, F> (b: bool, mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" calls the parser if the condition is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":96807,"byte_end":96812,"line_start":354,"line_end":354,"column_start":8,"column_end":13},"name":"condc","qualname":"::combinator::condc","value":"fn <I, O, E, F> (input: I, b: bool, f: F) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":769},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":97405,"byte_end":97409,"line_start":376,"line_end":376,"column_start":8,"column_end":12},"name":"peek","qualname":"::combinator::peek","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" tries to apply its parser without consuming the input","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":776},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":97686,"byte_end":97691,"line_start":390,"line_end":390,"column_start":8,"column_end":13},"name":"peekc","qualname":"::combinator::peekc","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":98259,"byte_end":98267,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"complete","qualname":"::combinator::complete","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" transforms Incomplete into Error","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":788},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":98602,"byte_end":98611,"line_start":426,"line_end":426,"column_start":8,"column_end":17},"name":"completec","qualname":"::combinator::completec","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":99296,"byte_end":99309,"line_start":449,"line_end":449,"column_start":8,"column_end":21},"name":"all_consuming","qualname":"::combinator::all_consuming","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" succeeds if all the input has been consumed by its child parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":100317,"byte_end":100323,"line_start":483,"line_end":483,"column_start":8,"column_end":14},"name":"verify","qualname":"::combinator::verify","value":"fn <I, O1, O2, E, F, G> (mut first: F, second: G) -> impl FnMut(I) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":" returns the result of the child parser if it satisfies a verification function","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":100772,"byte_end":100779,"line_start":506,"line_end":506,"column_start":8,"column_end":15},"name":"verifyc","qualname":"::combinator::verifyc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":816},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":101471,"byte_end":101476,"line_start":535,"line_end":535,"column_start":8,"column_end":13},"name":"value","qualname":"::combinator::value","value":"fn <I, O1, O2, E, F> (val: O1, mut parser: F) -> impl FnMut(I) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":" returns the provided value if the child parser succeeds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":101710,"byte_end":101716,"line_start":546,"line_end":546,"column_start":8,"column_end":14},"name":"valuec","qualname":"::combinator::valuec","value":"fn <I, O1, O2, E, F> (input: I, val: O1, parser: F) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":831},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":102317,"byte_end":102320,"line_start":572,"line_end":572,"column_start":8,"column_end":11},"name":"not","qualname":"::combinator::not","value":"fn <I, O, E, F> (mut parser: F) -> impl FnMut(I) -> IResult<I, (), E>","parent":null,"children":[],"decl_id":null,"docs":" succeeds if the child parser returns an error","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":838},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":102688,"byte_end":102692,"line_start":587,"line_end":587,"column_start":8,"column_end":12},"name":"notc","qualname":"::combinator::notc","value":"fn <I, O, E, F> (input: I, parser: F) -> IResult<I, (), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":843},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":103400,"byte_end":103409,"line_start":610,"line_end":610,"column_start":8,"column_end":17},"name":"recognize","qualname":"::combinator::recognize","value":"fn <I, O, E, F> (mut parser: F) -> impl FnMut(I) -> IResult<I, I, E>","parent":null,"children":[],"decl_id":null,"docs":" if the child parser was successful, return the consumed input as produced value","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":850},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":103804,"byte_end":103814,"line_start":629,"line_end":629,"column_start":8,"column_end":18},"name":"recognizec","qualname":"::combinator::recognizec","value":"fn <I, O, E, F> (input: I, parser: F) -> IResult<I, I, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":855},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":104422,"byte_end":104425,"line_start":654,"line_end":654,"column_start":8,"column_end":11},"name":"cut","qualname":"::combinator::cut","value":"fn <I, O, E, F> (mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" transforms an error to failure","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":862},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":104676,"byte_end":104680,"line_start":665,"line_end":665,"column_start":8,"column_end":12},"name":"cutc","qualname":"::combinator::cutc","value":"fn <I, O, E, F> (input: I, parser: F) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":867},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":105565,"byte_end":105573,"line_start":690,"line_end":690,"column_start":8,"column_end":16},"name":"iterator","qualname":"::combinator::iterator","value":"fn <Input, Output, Error, F> (input: Input, f: F) -> ParserIterator<Input, Error, F>","parent":null,"children":[],"decl_id":null,"docs":" creates an iterator from input data and a parser","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":872},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":105880,"byte_end":105894,"line_start":703,"line_end":703,"column_start":12,"column_end":26},"name":"ParserIterator","qualname":"::combinator::ParserIterator","value":"ParserIterator {  }","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878}],"decl_id":null,"docs":" main structure associated to the [iterator] function\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":106120,"byte_end":106126,"line_start":711,"line_end":711,"column_start":10,"column_end":16},"name":"finish","qualname":"<ParserIterator<I, E, F>>::finish","value":"fn (mut self) -> IResult<I, (), E>","parent":null,"children":[],"decl_id":null,"docs":" returns the remaining input if parsing was successful, or the error if we encountered an error\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":904},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"branch","qualname":"::branch","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":919},{"krate":0,"index":924},{"krate":0,"index":931},{"krate":0,"index":936},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":3978},{"krate":0,"index":3985},{"krate":0,"index":3993},{"krate":0,"index":4002},{"krate":0,"index":4012},{"krate":0,"index":4023},{"krate":0,"index":4035},{"krate":0,"index":4048},{"krate":0,"index":4062},{"krate":0,"index":4077},{"krate":0,"index":4093},{"krate":0,"index":4110},{"krate":0,"index":4128},{"krate":0,"index":4147},{"krate":0,"index":4167},{"krate":0,"index":4188},{"krate":0,"index":4210},{"krate":0,"index":4233},{"krate":0,"index":4257},{"krate":0,"index":4282},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":4308},{"krate":0,"index":4316},{"krate":0,"index":4326},{"krate":0,"index":4338},{"krate":0,"index":4352},{"krate":0,"index":4368},{"krate":0,"index":4386},{"krate":0,"index":4406},{"krate":0,"index":4428},{"krate":0,"index":4452},{"krate":0,"index":4478},{"krate":0,"index":4506},{"krate":0,"index":4536},{"krate":0,"index":4568},{"krate":0,"index":4602},{"krate":0,"index":4638},{"krate":0,"index":4676},{"krate":0,"index":4716},{"krate":0,"index":4758},{"krate":0,"index":4802}],"decl_id":null,"docs":" choice combinators\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16224,"byte_end":16236,"line_start":483,"line_end":483,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":919},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","byte_start":148516,"byte_end":148519,"line_start":13,"line_end":13,"column_start":11,"column_end":14},"name":"Alt","qualname":"::branch::Alt","value":"Alt<I, O, E>","parent":null,"children":[{"krate":0,"index":923}],"decl_id":null,"docs":" helper trait for the [alt()] combinator","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","byte_start":148627,"byte_end":148633,"line_start":15,"line_end":15,"column_start":6,"column_end":12},"name":"choice","qualname":"::branch::Alt::choice","value":"fn (&mut self, input: I) -> IResult<I, O, E>","parent":{"krate":0,"index":919},"children":[],"decl_id":null,"docs":" tests each parser in the tuple and returns the result of the first one that succeeds\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":924},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","byte_start":149661,"byte_end":149664,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"alt","qualname":"::branch::alt","value":"fn <I, O, E, List> (mut l: List) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" tests a list of parsers one by one until one succeeds","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":931},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","byte_start":149930,"byte_end":149941,"line_start":54,"line_end":54,"column_start":11,"column_end":22},"name":"Permutation","qualname":"::branch::Permutation","value":"Permutation<I, O, E>","parent":null,"children":[{"krate":0,"index":935}],"decl_id":null,"docs":" helper trait for the [permutation()] combinator","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","byte_start":150048,"byte_end":150059,"line_start":56,"line_end":56,"column_start":6,"column_end":17},"name":"permutation","qualname":"::branch::Permutation::permutation","value":"fn (&mut self, input: I) -> IResult<I, O, E>","parent":{"krate":0,"index":931},"children":[],"decl_id":null,"docs":" tries to apply all parsers in the tuple in various orders until all of them succeed\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":936},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/branch/mod.rs","byte_start":151030,"byte_end":151041,"line_start":85,"line_end":85,"column_start":8,"column_end":19},"name":"permutation","qualname":"::branch::permutation","value":"fn <I, O, E, List> (mut l: List) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a list of parsers in any order","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":950},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sequence","qualname":"::sequence","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":975},{"krate":0,"index":982},{"krate":0,"index":991},{"krate":0,"index":998},{"krate":0,"index":1008},{"krate":0,"index":1015},{"krate":0,"index":1027},{"krate":0,"index":1036},{"krate":0,"index":1048},{"krate":0,"index":1057},{"krate":0,"index":1062},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":4848},{"krate":0,"index":4856},{"krate":0,"index":4866},{"krate":0,"index":4878},{"krate":0,"index":4892},{"krate":0,"index":4908},{"krate":0,"index":4926},{"krate":0,"index":4946},{"krate":0,"index":4968},{"krate":0,"index":4992},{"krate":0,"index":5018},{"krate":0,"index":5046},{"krate":0,"index":5076},{"krate":0,"index":5108},{"krate":0,"index":5142},{"krate":0,"index":5178},{"krate":0,"index":5216},{"krate":0,"index":5256},{"krate":0,"index":5298},{"krate":0,"index":5342},{"krate":0,"index":1072}],"decl_id":null,"docs":" combinators applying parsers in sequence\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16253,"byte_end":16265,"line_start":485,"line_end":485,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":965},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":187609,"byte_end":187613,"line_start":28,"line_end":28,"column_start":8,"column_end":12},"name":"pair","qualname":"::sequence::pair","value":"fn <I, O1, O2, E, F, G> (mut first: F, mut second: G) -> impl FnMut(I) -> IResult<I, (O1, O2), E>","parent":null,"children":[],"decl_id":null,"docs":" Gets an object from the first parser,\n then gets another object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":975},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":187995,"byte_end":188000,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"pairc","qualname":"::sequence::pairc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, (O1, O2), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":982},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":188903,"byte_end":188911,"line_start":75,"line_end":75,"column_start":8,"column_end":16},"name":"preceded","qualname":"::sequence::preceded","value":"fn <I, O1, O2, E, F, G> (mut first: F, mut second: G) -> impl FnMut(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches an object from the first parser and discards it,\n then gets an object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":991},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":189257,"byte_end":189266,"line_start":91,"line_end":91,"column_start":8,"column_end":17},"name":"precededc","qualname":"::sequence::precededc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":998},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":190183,"byte_end":190193,"line_start":122,"line_end":122,"column_start":8,"column_end":18},"name":"terminated","qualname":"::sequence::terminated","value":"fn <I, O1, O2, E, F, G> (mut first: F, mut second: G) -> impl FnMut(I) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets an object from the first parser,\n then matches an object from the second parser and discards it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1008},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":190562,"byte_end":190573,"line_start":138,"line_end":138,"column_start":8,"column_end":19},"name":"terminatedc","qualname":"::sequence::terminatedc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1015},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":191613,"byte_end":191627,"line_start":171,"line_end":171,"column_start":8,"column_end":22},"name":"separated_pair","qualname":"::sequence::separated_pair","value":"fn <I, O1, O2, O3, E, F, G, H> (mut first: F, mut sep: G, mut second: H) -> impl FnMut(I) -> IResult<I, (O1, O3), E>","parent":null,"children":[],"decl_id":null,"docs":" Gets an object from the first parser,\n then matches an object from the sep_parser and discards it,\n then gets another object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1027},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":192093,"byte_end":192108,"line_start":190,"line_end":190,"column_start":8,"column_end":23},"name":"separated_pairc","qualname":"::sequence::separated_pairc","value":"fn <I, O1, O2, O3, E, F, G, H> (input: I, first: F, sep: G, second: H) -> IResult<I, (O1, O3), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1036},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":193168,"byte_end":193177,"line_start":225,"line_end":225,"column_start":8,"column_end":17},"name":"delimited","qualname":"::sequence::delimited","value":"fn <I, O1, O2, O3, E, F, G, H> (mut first: F, mut sep: G, mut second: H) -> impl FnMut(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches an object from the first parser,\n then gets an object from the sep_parser,\n then matches another object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1048},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":193630,"byte_end":193640,"line_start":244,"line_end":244,"column_start":8,"column_end":18},"name":"delimitedc","qualname":"::sequence::delimitedc","value":"fn <I, O1, O2, O3, E, F, G, H> (input: I, first: F, sep: G, second: H) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1057},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":194032,"byte_end":194037,"line_start":261,"line_end":261,"column_start":11,"column_end":16},"name":"Tuple","qualname":"::sequence::Tuple","value":"Tuple<I, O, E>","parent":null,"children":[{"krate":0,"index":1061}],"decl_id":null,"docs":" helper trait for the tuple combinator","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":194123,"byte_end":194128,"line_start":263,"line_end":263,"column_start":6,"column_end":11},"name":"parse","qualname":"::sequence::Tuple::parse","value":"fn (&mut self, input: I) -> IResult<I, O, E>","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" parses the input and returns a tuple of results of each parser\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1072},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/sequence/mod.rs","byte_start":196613,"byte_end":196618,"line_start":335,"line_end":335,"column_start":8,"column_end":13},"name":"tuple","qualname":"::sequence::tuple","value":"fn <I, O, E, List> (mut l: List) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a tuple of parsers one by one and returns their results as a tuple","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1079},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"multi","qualname":"::multi","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1108},{"krate":0,"index":1115},{"krate":0,"index":1120},{"krate":0,"index":1127},{"krate":0,"index":1132},{"krate":0,"index":1141},{"krate":0,"index":1148},{"krate":0,"index":1157},{"krate":0,"index":1164},{"krate":0,"index":1173},{"krate":0,"index":1180},{"krate":0,"index":1187},{"krate":0,"index":1192},{"krate":0,"index":1199},{"krate":0,"index":1204},{"krate":0,"index":1211},{"krate":0,"index":1216},{"krate":0,"index":1223},{"krate":0,"index":1231},{"krate":0,"index":1240},{"krate":0,"index":1247},{"krate":0,"index":1256},{"krate":0,"index":1263},{"krate":0,"index":1272},{"krate":0,"index":1279},{"krate":0,"index":1286},{"krate":0,"index":1295}],"decl_id":null,"docs":" combinators applying their child parser multiple times\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16284,"byte_end":16296,"line_start":487,"line_end":487,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":1108},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":225315,"byte_end":225320,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"many0","qualname":"::multi::many0","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser until it fails\n and returns the results in a `Vec`.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":225282,"byte_end":225307,"line_start":37,"line_end":37,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1115},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":226017,"byte_end":226023,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"many0c","qualname":"::multi::many0c","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":225984,"byte_end":226009,"line_start":65,"line_end":65,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1120},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":227107,"byte_end":227112,"line_start":102,"line_end":102,"column_start":8,"column_end":13},"name":"many1","qualname":"::multi::many1","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Runs the embedded parser until it fails and\n returns the results in a `Vec`. Fails if\n the embedded parser does not produce at least\n one result.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":227074,"byte_end":227099,"line_start":101,"line_end":101,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1127},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":228094,"byte_end":228100,"line_start":140,"line_end":140,"column_start":8,"column_end":14},"name":"many1c","qualname":"::multi::many1c","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":228061,"byte_end":228086,"line_start":139,"line_end":139,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1132},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":229100,"byte_end":229109,"line_start":168,"line_end":168,"column_start":8,"column_end":17},"name":"many_till","qualname":"::multi::many_till","value":"fn <I, O, P, E, F, G> (mut f: F, mut g: G) -> impl FnMut(I) -> IResult<I, (Vec<O>, P), E>","parent":null,"children":[],"decl_id":null,"docs":" Applies the parser `f` until the parser `g` produces\n a result. Returns a pair consisting of the results of\n `f` in a `Vec` and the result of `g`.\n ```rust\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many_till;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":229067,"byte_end":229092,"line_start":167,"line_end":167,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1141},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":230179,"byte_end":230189,"line_start":208,"line_end":208,"column_start":8,"column_end":18},"name":"many_tillc","qualname":"::multi::many_tillc","value":"fn <I, O, P, E, F, G> (i: I, f: F, g: G) -> IResult<I, (Vec<O>, P), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":230146,"byte_end":230171,"line_start":207,"line_end":207,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1148},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":231191,"byte_end":231206,"line_start":240,"line_end":240,"column_start":8,"column_end":23},"name":"separated_list0","qualname":"::multi::separated_list0","value":"fn <I, O, O2, E, F, G> (mut sep: G, mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Alternates between two parsers to produce\n a list of elements.\n # Arguments\n * `sep` Parses the separator between list elements.\n * `f` Parses the elements of the list.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":231158,"byte_end":231183,"line_start":239,"line_end":239,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1157},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":232561,"byte_end":232577,"line_start":297,"line_end":297,"column_start":8,"column_end":24},"name":"separated_list0c","qualname":"::multi::separated_list0c","value":"fn <I, O, O2, E, F, G> (i: I, sep: G, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":232528,"byte_end":232553,"line_start":296,"line_end":296,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1164},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":233732,"byte_end":233747,"line_start":330,"line_end":330,"column_start":8,"column_end":23},"name":"separated_list1","qualname":"::multi::separated_list1","value":"fn <I, O, O2, E, F, G> (mut sep: G, mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Alternates between two parsers to produce\n a list of elements. Fails if the element\n parser does not produce at least one element.\n # Arguments\n * `sep` Parses the separator between list elements.\n * `f` Parses the elements of the list.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::separated_list1;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":233699,"byte_end":233724,"line_start":329,"line_end":329,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1173},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":235084,"byte_end":235100,"line_start":387,"line_end":387,"column_start":8,"column_end":24},"name":"separated_list1c","qualname":"::multi::separated_list1c","value":"fn <I, O, O2, E, F, G> (i: I, sep: G, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":235051,"byte_end":235076,"line_start":386,"line_end":386,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1180},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":236232,"byte_end":236240,"line_start":421,"line_end":421,"column_start":8,"column_end":16},"name":"many_m_n","qualname":"::multi::many_m_n","value":"fn <I, O, E, F> (m: usize, n: usize, mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser `n` times or until it fails\n and returns the results in a `Vec`. Fails if the\n embedded parser does not succeed at least `m` times.\n # Arguments\n * `m` The minimum number of iterations.\n * `n` The maximum number of iterations.\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many_m_n;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":236199,"byte_end":236224,"line_start":420,"line_end":420,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1187},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":237443,"byte_end":237452,"line_start":471,"line_end":471,"column_start":8,"column_end":17},"name":"many_m_nc","qualname":"::multi::many_m_nc","value":"fn <I, O, E, F> (i: I, m: usize, n: usize, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":237410,"byte_end":237435,"line_start":470,"line_end":470,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1192},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":238255,"byte_end":238266,"line_start":499,"line_end":499,"column_start":8,"column_end":19},"name":"many0_count","qualname":"::multi::many0_count","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser until it fails\n and returns the number of successful iterations.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many0_count;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1199},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":238958,"byte_end":238970,"line_start":531,"line_end":531,"column_start":8,"column_end":20},"name":"many0_countc","qualname":"::multi::many0_countc","value":"fn <I, O, E, F> (i: I, f: F) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1204},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":239884,"byte_end":239895,"line_start":561,"line_end":561,"column_start":8,"column_end":19},"name":"many1_count","qualname":"::multi::many1_count","value":"fn <I, O, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser until it fails\n and returns the number of successful iterations.\n Fails if the embedded parser does not succeed\n at least once.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many1_count;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1211},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":240767,"byte_end":240779,"line_start":597,"line_end":597,"column_start":8,"column_end":20},"name":"many1_countc","qualname":"::multi::many1_countc","value":"fn <I, O, E, F> (i: I, f: F) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1216},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":241783,"byte_end":241788,"line_start":628,"line_end":628,"column_start":8,"column_end":13},"name":"count","qualname":"::multi::count","value":"fn <I, O, E, F> (mut f: F, count: usize) -> impl FnMut(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Runs the embedded parser a specified number\n of times. Returns the results in a `Vec`.\n # Arguments\n * `f` The parser to apply.\n * `count` How often to apply the parser.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::count;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":241750,"byte_end":241775,"line_start":627,"line_end":627,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1223},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":243352,"byte_end":243356,"line_start":681,"line_end":681,"column_start":8,"column_end":12},"name":"fill","qualname":"::multi::fill","value":"fn <'a, I, O, E, F> (f: F, buf: &'a mut [O]) -> impl FnMut(I) -> IResult<I, (), E> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Runs the embedded parser repeatedly, filling the given slice with results. This parser fails if\n the input runs out before the given slice is full.\n # Arguments\n * `f` The parser to apply.\n * `buf` The slice to fill\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::fill;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1231},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":244870,"byte_end":244880,"line_start":739,"line_end":739,"column_start":8,"column_end":18},"name":"fold_many0","qualname":"::multi::fold_many0","value":"fn <I, O, E, F, G, R> (mut f: F, init: R, g: G) -> impl FnMut(I) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":" Applies a parser until it fails and accumulates\n the results using a given function and initial value.\n # Arguments\n * `f` The parser to apply.\n * `init` The initial value.\n * `g` The function that combines a result of `f` with\n       the current accumulator.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::fold_many0;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1240},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":245661,"byte_end":245672,"line_start":775,"line_end":775,"column_start":8,"column_end":19},"name":"fold_many0c","qualname":"::multi::fold_many0c","value":"fn <I, O, E, F, G, R> (i: I, f: F, init: R, g: G) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1247},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":246918,"byte_end":246928,"line_start":817,"line_end":817,"column_start":8,"column_end":18},"name":"fold_many1","qualname":"::multi::fold_many1","value":"fn <I, O, E, F, G, R> (mut f: F, init: R, g: G) -> impl FnMut(I) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":" Applies a parser until it fails and accumulates\n the results using a given function and initial value.\n Fails if the embedded parser does not succeed at least\n once.\n # Arguments\n * `f` The parser to apply.\n * `init` The initial value.\n * `g` The function that combines a result of `f` with\n       the current accumulator.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::fold_many1;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1256},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":247927,"byte_end":247938,"line_start":860,"line_end":860,"column_start":8,"column_end":19},"name":"fold_many1c","qualname":"::multi::fold_many1c","value":"fn <I, O, E, F, G, R> (i: I, f: F, init: R, g: G) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1263},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":249342,"byte_end":249355,"line_start":907,"line_end":907,"column_start":8,"column_end":21},"name":"fold_many_m_n","qualname":"::multi::fold_many_m_n","value":"fn <I, O, E, F, G, R> (m: usize, n: usize, mut f: F, init: R, g: G) -> impl FnMut(I) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":" Applies a parser `n` times or until it fails and accumulates\n the results using a given function and initial value.\n Fails if the embedded parser does not succeed at least `m`\n times.\n # Arguments\n * `m` The minimum number of iterations.\n * `n` The maximum number of iterations.\n * `f` The parser to apply.\n * `init` The initial value.\n * `g` The function that combines a result of `f` with\n       the current accumulator.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::fold_many_m_n;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1272},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":250367,"byte_end":250381,"line_start":953,"line_end":953,"column_start":8,"column_end":22},"name":"fold_many_m_nc","qualname":"::multi::fold_many_m_nc","value":"fn <I, O, E, F, G, R> (i: I, m: usize, n: usize, f: F, init: R, g: G) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1279},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":251321,"byte_end":251332,"line_start":991,"line_end":991,"column_start":8,"column_end":19},"name":"length_data","qualname":"::multi::length_data","value":"fn <I, N, E, F> (mut f: F) -> impl FnMut(I) -> IResult<I, I, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets a number from the parser and returns a\n subslice of the input of that size.\n If the parser returns Incomplete,\n length_data will return an error.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::number::complete::be_u16;\n use nom::multi::length_data;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1286},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":252576,"byte_end":252588,"line_start":1033,"line_end":1033,"column_start":8,"column_end":20},"name":"length_value","qualname":"::multi::length_value","value":"fn <I, O, N, E, F, G> (mut f: F, mut g: G) -> impl FnMut(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets a number from the first parser,\n takes a subslice of the input of that size,\n then applies the second parser on that subslice.\n If the second parser returns Incomplete,\n length_value will return an error.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::number::complete::be_u16;\n use nom::multi::length_value;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1295},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/multi/mod.rs","byte_start":253263,"byte_end":253276,"line_start":1060,"line_end":1060,"column_start":8,"column_end":21},"name":"length_valuec","qualname":"::multi::length_valuec","value":"fn <I, O, N, E, F, G> (i: I, f: F, g: G) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1302},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bytes","qualname":"::bytes","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/mod.rs","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1319},{"krate":0,"index":1451}],"decl_id":null,"docs":" parsers recognizing bytes streams\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16313,"byte_end":16325,"line_start":490,"line_end":490,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1319},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::bytes::complete","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1339},{"krate":0,"index":1345},{"krate":0,"index":1351},{"krate":0,"index":1358},{"krate":0,"index":1365},{"krate":0,"index":1372},{"krate":0,"index":1379},{"krate":0,"index":1386},{"krate":0,"index":1393},{"krate":0,"index":1400},{"krate":0,"index":1406},{"krate":0,"index":1412},{"krate":0,"index":1423},{"krate":0,"index":1430},{"krate":0,"index":1442}],"decl_id":null,"docs":" parsers recognizing bytes streams, complete input version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1339},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":318108,"byte_end":318111,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"tag","qualname":"::bytes::complete::tag","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1345},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":319542,"byte_end":319553,"line_start":76,"line_end":76,"column_start":8,"column_end":19},"name":"tag_no_case","qualname":"::bytes::complete::tag_no_case","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a case insensitive pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1351},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":320890,"byte_end":320896,"line_start":120,"line_end":120,"column_start":8,"column_end":14},"name":"is_not","qualname":"::bytes::complete::is_not","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Parse till certain characters are met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1358},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":322084,"byte_end":322088,"line_start":156,"line_end":156,"column_start":8,"column_end":12},"name":"is_a","qualname":"::bytes::complete::is_a","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest slice of the matches the pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1365},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":323191,"byte_end":323201,"line_start":190,"line_end":190,"column_start":8,"column_end":18},"name":"take_while","qualname":"::bytes::complete::take_while","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1372},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":324318,"byte_end":324329,"line_start":222,"line_end":222,"column_start":8,"column_end":19},"name":"take_while1","qualname":"::bytes::complete::take_while1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1379},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":325748,"byte_end":325762,"line_start":260,"line_end":260,"column_start":8,"column_end":22},"name":"take_while_m_n","qualname":"::bytes::complete::take_while_m_n","value":"fn <F, Input, Error> (m: usize, n: usize, cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (m <= len <= n) input slice  that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1386},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":328324,"byte_end":328333,"line_start":345,"line_end":345,"column_start":8,"column_end":17},"name":"take_till","qualname":"::bytes::complete::take_till","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1393},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":329513,"byte_end":329523,"line_start":378,"line_end":378,"column_start":8,"column_end":18},"name":"take_till1","qualname":"::bytes::complete::take_till1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1400},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":330529,"byte_end":330533,"line_start":410,"line_end":410,"column_start":8,"column_end":12},"name":"take","qualname":"::bytes::complete::take","value":"fn <C, Input, Error> (count: C) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns an input slice containing the first N input elements (Input[..N])","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1406},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":331602,"byte_end":331612,"line_start":443,"line_end":443,"column_start":8,"column_end":18},"name":"take_until","qualname":"::bytes::complete::take_until","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice till it matches the pattern.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1412},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":332811,"byte_end":332818,"line_start":482,"line_end":482,"column_start":8,"column_end":15},"name":"escaped","qualname":"::bytes::complete::escaped","value":"fn <'a, Input, Error, F, G, O1, O2> (mut normal: F, control_char: char, mut escapable: G) -> impl FnMut(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1423},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":334865,"byte_end":334873,"line_start":557,"line_end":557,"column_start":8,"column_end":16},"name":"escapedc","qualname":"::bytes::complete::escapedc","value":"fn <Input, Error, F, G, O1, O2> (i: Input, normal: F, control_char: char, escapable: G) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1430},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":336464,"byte_end":336481,"line_start":611,"line_end":611,"column_start":8,"column_end":25},"name":"escaped_transform","qualname":"::bytes::complete::escaped_transform","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (mut normal: F, control_char: char, mut transform: G) -> impl FnMut(Input) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":336431,"byte_end":336456,"line_start":610,"line_end":610,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1442},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":339206,"byte_end":339224,"line_start":697,"line_end":697,"column_start":8,"column_end":26},"name":"escaped_transformc","qualname":"::bytes::complete::escaped_transformc","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (i: Input, normal: F, control_char: char, transform: G) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/complete.rs","byte_start":339173,"byte_end":339198,"line_start":696,"line_end":696,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1451},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::bytes::streaming","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1472},{"krate":0,"index":1478},{"krate":0,"index":1484},{"krate":0,"index":1491},{"krate":0,"index":1498},{"krate":0,"index":1505},{"krate":0,"index":1512},{"krate":0,"index":1519},{"krate":0,"index":1526},{"krate":0,"index":1533},{"krate":0,"index":1539},{"krate":0,"index":1545},{"krate":0,"index":1555},{"krate":0,"index":1562},{"krate":0,"index":1574}],"decl_id":null,"docs":" parsers recognizing bytes streams, streaming version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1472},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":341716,"byte_end":341719,"line_start":31,"line_end":31,"column_start":8,"column_end":11},"name":"tag","qualname":"::bytes::streaming::tag","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1478},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":343148,"byte_end":343159,"line_start":74,"line_end":74,"column_start":8,"column_end":19},"name":"tag_no_case","qualname":"::bytes::streaming::tag_no_case","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a case insensitive pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1484},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":344606,"byte_end":344612,"line_start":119,"line_end":119,"column_start":8,"column_end":14},"name":"is_not","qualname":"::bytes::streaming::is_not","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Parse till certain characters are met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1491},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":345892,"byte_end":345896,"line_start":156,"line_end":156,"column_start":8,"column_end":12},"name":"is_a","qualname":"::bytes::streaming::is_a","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest slice of the matches the pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1498},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":347151,"byte_end":347161,"line_start":192,"line_end":192,"column_start":8,"column_end":18},"name":"take_while","qualname":"::bytes::streaming::take_while","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1505},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":348426,"byte_end":348437,"line_start":227,"line_end":227,"column_start":8,"column_end":19},"name":"take_while1","qualname":"::bytes::streaming::take_while1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1512},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":349958,"byte_end":349972,"line_start":266,"line_end":266,"column_start":8,"column_end":22},"name":"take_while_m_n","qualname":"::bytes::streaming::take_while_m_n","value":"fn <F, Input, Error> (m: usize, n: usize, cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (m <= len <= n) input slice  that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1519},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":352565,"byte_end":352574,"line_start":350,"line_end":350,"column_start":8,"column_end":17},"name":"take_till","qualname":"::bytes::streaming::take_till","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1526},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":353788,"byte_end":353798,"line_start":383,"line_end":383,"column_start":8,"column_end":18},"name":"take_till1","qualname":"::bytes::streaming::take_till1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1533},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":354875,"byte_end":354879,"line_start":416,"line_end":416,"column_start":8,"column_end":12},"name":"take","qualname":"::bytes::streaming::take","value":"fn <C, Input, Error> (count: C) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns an input slice containing the first N input elements (Input[..N])","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1539},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":355996,"byte_end":356006,"line_start":451,"line_end":451,"column_start":8,"column_end":18},"name":"take_until","qualname":"::bytes::streaming::take_until","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice till it matches the pattern.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1545},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":357210,"byte_end":357217,"line_start":492,"line_end":492,"column_start":8,"column_end":15},"name":"escaped","qualname":"::bytes::streaming::escaped","value":"fn <Input, Error, F, G, O1, O2> (mut normal: F, control_char: char, mut escapable: G) -> impl FnMut(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1555},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":358973,"byte_end":358981,"line_start":558,"line_end":558,"column_start":8,"column_end":16},"name":"escapedc","qualname":"::bytes::streaming::escapedc","value":"fn <Input, Error, F, G, O1, O2> (i: Input, normal: F, control_char: char, escapable: G) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1562},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":360578,"byte_end":360595,"line_start":612,"line_end":612,"column_start":8,"column_end":25},"name":"escaped_transform","qualname":"::bytes::streaming::escaped_transform","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (mut normal: F, control_char: char, mut transform: G) -> impl FnMut(Input) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":360545,"byte_end":360570,"line_start":611,"line_end":611,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1574},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":363046,"byte_end":363064,"line_start":689,"line_end":689,"column_start":8,"column_end":26},"name":"escaped_transformc","qualname":"::bytes::streaming::escaped_transformc","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (i: Input, normal: F, control_char: char, transform: G) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/streaming.rs","byte_start":363013,"byte_end":363038,"line_start":688,"line_end":688,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1583},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bits","qualname":"::bits","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1589},{"krate":0,"index":1622},{"krate":0,"index":1656},{"krate":0,"index":1659},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1676},{"krate":0,"index":1682},{"krate":0,"index":1690}],"decl_id":null,"docs":" bit level parsers","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16341,"byte_end":16353,"line_start":492,"line_end":492,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1589},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::bits::complete","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/complete.rs","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":1602},{"krate":0,"index":1607},{"krate":0,"index":1614}],"decl_id":null,"docs":" bit level parsers","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1607},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/complete.rs","byte_start":376261,"byte_end":376265,"line_start":10,"line_end":10,"column_start":8,"column_end":12},"name":"take","qualname":"::bits::complete::take","value":"fn <I, O, C, E> (count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1614},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/complete.rs","byte_start":377817,"byte_end":377820,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"tag","qualname":"::bits::complete::tag","value":"fn <I, O, C, E> (pattern: O, count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits and comparing them to `pattern`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1622},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::bits::streaming","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/streaming.rs","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1626},{"krate":0,"index":1630},{"krate":0,"index":1636},{"krate":0,"index":1641},{"krate":0,"index":1648}],"decl_id":null,"docs":" bit level parsers","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1641},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/streaming.rs","byte_start":378696,"byte_end":378700,"line_start":10,"line_end":10,"column_start":8,"column_end":12},"name":"take","qualname":"::bits::streaming::take","value":"fn <I, O, C, E> (count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1648},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/streaming.rs","byte_start":380198,"byte_end":380201,"line_start":59,"line_end":59,"column_start":8,"column_end":11},"name":"tag","qualname":"::bits::streaming::tag","value":"fn <I, O, C, E> (pattern: O, count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits and comparing them to `pattern`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1667},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","byte_start":364929,"byte_end":364933,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"bits","qualname":"::bits::bits","value":"fn <I, O, E1, E2, P> (parser: P) -> impl Fn(I) -> IResult<I, O, E2>","parent":null,"children":[],"decl_id":null,"docs":" Converts a byte-level input to a bit-level input, for consumption by a parser that uses bits.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1676},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","byte_start":365576,"byte_end":365581,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"bitsc","qualname":"::bits::bitsc","value":"fn <I, O, E1, E2, P> (input: I, parser: P) -> IResult<I, O, E2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1682},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","byte_start":366644,"byte_end":366649,"line_start":91,"line_end":91,"column_start":8,"column_end":13},"name":"bytes","qualname":"::bits::bytes","value":"fn <I, O, E1, E2, P> (parser: P) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E2>","parent":null,"children":[],"decl_id":null,"docs":" Counterpart to bits, bytes transforms its bit stream input into a byte slice for the underlying\n parser, allowing byte-slice parsers to work on bit streams.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1690},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","byte_start":367613,"byte_end":367619,"line_start":119,"line_end":119,"column_start":8,"column_end":14},"name":"bytesc","qualname":"::bits::bytesc","value":"fn <I, O, E1, E2, P> (input: (I, usize), parser: P) -> IResult<(I, usize), O, E2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1696},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"character","qualname":"::character","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","parent":null,"children":[{"krate":0,"index":1697},{"krate":0,"index":1701},{"krate":0,"index":1816},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937}],"decl_id":null,"docs":" character specific parsers and combinators","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16369,"byte_end":16381,"line_start":495,"line_end":495,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1701},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::character::complete","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1707},{"krate":0,"index":1711},{"krate":0,"index":1718},{"krate":0,"index":1721},{"krate":0,"index":1727},{"krate":0,"index":1734},{"krate":0,"index":1741},{"krate":0,"index":1744},{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1754},{"krate":0,"index":1757},{"krate":0,"index":1760},{"krate":0,"index":1764},{"krate":0,"index":1768},{"krate":0,"index":1772},{"krate":0,"index":1776},{"krate":0,"index":1780},{"krate":0,"index":1784},{"krate":0,"index":1788},{"krate":0,"index":1792},{"krate":0,"index":1796},{"krate":0,"index":1800},{"krate":0,"index":1804},{"krate":0,"index":1808},{"krate":0,"index":1812}],"decl_id":null,"docs":" Character specific parsers and combinators, complete input version.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1721},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":386934,"byte_end":386938,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"char","qualname":"::character::complete::char","value":"fn <I, Error> (c: char) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1727},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":387892,"byte_end":387898,"line_start":56,"line_end":56,"column_start":8,"column_end":14},"name":"one_of","qualname":"::character::complete::one_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one of the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1734},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":388924,"byte_end":388931,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"none_of","qualname":"::character::complete::none_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a character that is not in the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1741},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":389928,"byte_end":389932,"line_start":114,"line_end":114,"column_start":8,"column_end":12},"name":"crlf","qualname":"::character::complete::crlf","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes the string \"\\r\\n\".","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1744},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":390941,"byte_end":390956,"line_start":150,"line_end":150,"column_start":8,"column_end":23},"name":"not_line_ending","qualname":"::character::complete::not_line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a string of any char except '\\r' or '\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1748},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":392593,"byte_end":392604,"line_start":203,"line_end":203,"column_start":8,"column_end":19},"name":"line_ending","qualname":"::character::complete::line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an end of line (both '\\n' and '\\r\\n').","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1751},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":393838,"byte_end":393845,"line_start":241,"line_end":241,"column_start":8,"column_end":15},"name":"newline","qualname":"::character::complete::newline","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a newline character '\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1754},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":394576,"byte_end":394579,"line_start":268,"line_end":268,"column_start":8,"column_end":11},"name":"tab","qualname":"::character::complete::tab","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a tab character '\\t'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1757},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":395318,"byte_end":395325,"line_start":294,"line_end":294,"column_start":8,"column_end":15},"name":"anychar","qualname":"::character::complete::anychar","value":"fn <T, E> (input: T) -> IResult<T, char, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches one byte as a character. Note that the input type will\n accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1760},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":396396,"byte_end":396402,"line_start":329,"line_end":329,"column_start":8,"column_end":14},"name":"alpha0","qualname":"::character::complete::alpha0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1764},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":397302,"byte_end":397308,"line_start":357,"line_end":357,"column_start":8,"column_end":14},"name":"alpha1","qualname":"::character::complete::alpha1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1768},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":398186,"byte_end":398192,"line_start":386,"line_end":386,"column_start":8,"column_end":14},"name":"digit0","qualname":"::character::complete::digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical characters: 0-9","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1772},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":399058,"byte_end":399064,"line_start":414,"line_end":414,"column_start":8,"column_end":14},"name":"digit1","qualname":"::character::complete::digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical characters: 0-9","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1776},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":399894,"byte_end":399904,"line_start":441,"line_end":441,"column_start":8,"column_end":18},"name":"hex_digit0","qualname":"::character::complete::hex_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1780},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":400819,"byte_end":400829,"line_start":468,"line_end":468,"column_start":8,"column_end":18},"name":"hex_digit1","qualname":"::character::complete::hex_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1784},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":401628,"byte_end":401638,"line_start":496,"line_end":496,"column_start":8,"column_end":18},"name":"oct_digit0","qualname":"::character::complete::oct_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1788},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":402516,"byte_end":402526,"line_start":524,"line_end":524,"column_start":8,"column_end":18},"name":"oct_digit1","qualname":"::character::complete::oct_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1792},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":403375,"byte_end":403388,"line_start":552,"line_end":552,"column_start":8,"column_end":21},"name":"alphanumeric0","qualname":"::character::complete::alphanumeric0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1796},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":404323,"byte_end":404336,"line_start":580,"line_end":580,"column_start":8,"column_end":21},"name":"alphanumeric1","qualname":"::character::complete::alphanumeric1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1800},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":405123,"byte_end":405129,"line_start":608,"line_end":608,"column_start":8,"column_end":14},"name":"space0","qualname":"::character::complete::space0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1804},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":406044,"byte_end":406050,"line_start":639,"line_end":639,"column_start":8,"column_end":14},"name":"space1","qualname":"::character::complete::space1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1808},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":406956,"byte_end":406967,"line_start":673,"line_end":673,"column_start":8,"column_end":19},"name":"multispace0","qualname":"::character::complete::multispace0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1812},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/complete.rs","byte_start":407966,"byte_end":407977,"line_start":704,"line_end":704,"column_start":8,"column_end":19},"name":"multispace1","qualname":"::character::complete::multispace1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1816},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::character::streaming","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","parent":null,"children":[{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1822},{"krate":0,"index":1826},{"krate":0,"index":1833},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1843},{"krate":0,"index":1850},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1864},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1880},{"krate":0,"index":1884},{"krate":0,"index":1888},{"krate":0,"index":1892},{"krate":0,"index":1896},{"krate":0,"index":1900},{"krate":0,"index":1904},{"krate":0,"index":1908},{"krate":0,"index":1912},{"krate":0,"index":1916},{"krate":0,"index":1920},{"krate":0,"index":1924},{"krate":0,"index":1928}],"decl_id":null,"docs":" character specific parsers and combinators, streaming version","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1837},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":420769,"byte_end":420773,"line_start":28,"line_end":28,"column_start":8,"column_end":12},"name":"char","qualname":"::character::streaming::char","value":"fn <I, Error> (c: char) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1843},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":421812,"byte_end":421818,"line_start":58,"line_end":58,"column_start":8,"column_end":14},"name":"one_of","qualname":"::character::streaming::one_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one of the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1850},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":422928,"byte_end":422935,"line_start":86,"line_end":86,"column_start":8,"column_end":15},"name":"none_of","qualname":"::character::streaming::none_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a character that is not in the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1857},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":424002,"byte_end":424006,"line_start":114,"line_end":114,"column_start":8,"column_end":12},"name":"crlf","qualname":"::character::streaming::crlf","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes the string \"\\r\\n\".","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1860},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":425160,"byte_end":425175,"line_start":146,"line_end":146,"column_start":8,"column_end":23},"name":"not_line_ending","qualname":"::character::streaming::not_line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a string of any char except '\\r' or '\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1864},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":426912,"byte_end":426923,"line_start":196,"line_end":196,"column_start":8,"column_end":19},"name":"line_ending","qualname":"::character::streaming::line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an end of line (both '\\n' and '\\r\\n').","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1867},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":428232,"byte_end":428239,"line_start":231,"line_end":231,"column_start":8,"column_end":15},"name":"newline","qualname":"::character::streaming::newline","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a newline character '\\\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1870},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":428965,"byte_end":428968,"line_start":254,"line_end":254,"column_start":8,"column_end":11},"name":"tab","qualname":"::character::streaming::tab","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a tab character '\\t'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1873},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":429697,"byte_end":429704,"line_start":276,"line_end":276,"column_start":8,"column_end":15},"name":"anychar","qualname":"::character::streaming::anychar","value":"fn <T, E> (input: T) -> IResult<T, char, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches one byte as a character. Note that the input type will\n accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1876},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":430810,"byte_end":430816,"line_start":307,"line_end":307,"column_start":8,"column_end":14},"name":"alpha0","qualname":"::character::streaming::alpha0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1880},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":431690,"byte_end":431696,"line_start":331,"line_end":331,"column_start":8,"column_end":14},"name":"alpha1","qualname":"::character::streaming::alpha1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1884},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":432530,"byte_end":432536,"line_start":355,"line_end":355,"column_start":8,"column_end":14},"name":"digit0","qualname":"::character::streaming::digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical characters: 0-9","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1888},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":433377,"byte_end":433383,"line_start":379,"line_end":379,"column_start":8,"column_end":14},"name":"digit1","qualname":"::character::streaming::digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical characters: 0-9","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1892},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":434273,"byte_end":434283,"line_start":403,"line_end":403,"column_start":8,"column_end":18},"name":"hex_digit0","qualname":"::character::streaming::hex_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1896},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":435179,"byte_end":435189,"line_start":427,"line_end":427,"column_start":8,"column_end":18},"name":"hex_digit1","qualname":"::character::streaming::hex_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1900},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":436044,"byte_end":436054,"line_start":451,"line_end":451,"column_start":8,"column_end":18},"name":"oct_digit0","qualname":"::character::streaming::oct_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1904},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":436912,"byte_end":436922,"line_start":475,"line_end":475,"column_start":8,"column_end":18},"name":"oct_digit1","qualname":"::character::streaming::oct_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1908},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":437833,"byte_end":437846,"line_start":499,"line_end":499,"column_start":8,"column_end":21},"name":"alphanumeric0","qualname":"::character::streaming::alphanumeric0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1912},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":438763,"byte_end":438776,"line_start":523,"line_end":523,"column_start":8,"column_end":21},"name":"alphanumeric1","qualname":"::character::streaming::alphanumeric1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1916},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":439611,"byte_end":439617,"line_start":547,"line_end":547,"column_start":8,"column_end":14},"name":"space0","qualname":"::character::streaming::space0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1920},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":440506,"byte_end":440512,"line_start":573,"line_end":573,"column_start":8,"column_end":14},"name":"space1","qualname":"::character::streaming::space1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1924},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":441476,"byte_end":441487,"line_start":603,"line_end":603,"column_start":8,"column_end":19},"name":"multispace0","qualname":"::character::streaming::multispace0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1928},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/streaming.rs","byte_start":442466,"byte_end":442477,"line_start":630,"line_end":630,"column_start":8,"column_end":19},"name":"multispace1","qualname":"::character::streaming::multispace1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1932},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":381178,"byte_end":381191,"line_start":21,"line_end":21,"column_start":8,"column_end":21},"name":"is_alphabetic","qualname":"::character::is_alphabetic","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphabetic: A-Z, a-z","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":381161,"byte_end":381170,"line_start":20,"line_end":20,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1933},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":381483,"byte_end":381491,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"is_digit","qualname":"::character::is_digit","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII digit: 0-9","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":381466,"byte_end":381475,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1934},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":381859,"byte_end":381871,"line_start":51,"line_end":51,"column_start":8,"column_end":20},"name":"is_hex_digit","qualname":"::character::is_hex_digit","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII hex digit: 0-9, A-F, a-f","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":381842,"byte_end":381851,"line_start":50,"line_end":50,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1935},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":382256,"byte_end":382268,"line_start":66,"line_end":66,"column_start":8,"column_end":20},"name":"is_oct_digit","qualname":"::character::is_oct_digit","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII octal digit: 0-7","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":382239,"byte_end":382248,"line_start":65,"line_end":65,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1936},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":382654,"byte_end":382669,"line_start":82,"line_end":82,"column_start":8,"column_end":23},"name":"is_alphanumeric","qualname":"::character::is_alphanumeric","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":382637,"byte_end":382646,"line_start":81,"line_end":81,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1937},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":383018,"byte_end":383026,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"is_space","qualname":"::character::is_space","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII space or tab","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":383001,"byte_end":383010,"line_start":97,"line_end":97,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":1939},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"number","qualname":"::number","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/mod.rs","parent":null,"children":[{"krate":0,"index":1940},{"krate":0,"index":1949},{"krate":0,"index":2077},{"krate":0,"index":5436},{"krate":0,"index":5448},{"krate":0,"index":5446},{"krate":0,"index":5444},{"krate":0,"index":5442},{"krate":0,"index":5441}],"decl_id":null,"docs":" parsers recognizing numbers\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16469,"byte_end":16481,"line_start":504,"line_end":504,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1949},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::number::complete","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","parent":null,"children":[{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1967},{"krate":0,"index":1970},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":1999},{"krate":0,"index":2002},{"krate":0,"index":2005},{"krate":0,"index":2008},{"krate":0,"index":2011},{"krate":0,"index":2014},{"krate":0,"index":2017},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2032},{"krate":0,"index":2035},{"krate":0,"index":2038},{"krate":0,"index":2041},{"krate":0,"index":2044},{"krate":0,"index":2047},{"krate":0,"index":2050},{"krate":0,"index":2053},{"krate":0,"index":2056},{"krate":0,"index":2059},{"krate":0,"index":2062},{"krate":0,"index":2066},{"krate":0,"index":2071},{"krate":0,"index":2074}],"decl_id":null,"docs":" parsers recognizing numbers, complete input version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1978},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":478979,"byte_end":478984,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"be_u8","qualname":"::number::complete::be_u8","value":"fn <I, E> (input: I) -> IResult<I, u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":478962,"byte_end":478971,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1981},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":479835,"byte_end":479841,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"be_u16","qualname":"::number::complete::be_u16","value":"fn <I, E> (input: I) -> IResult<I, u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":479818,"byte_end":479827,"line_start":59,"line_end":59,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1984},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":480765,"byte_end":480771,"line_start":93,"line_end":93,"column_start":8,"column_end":14},"name":"be_u24","qualname":"::number::complete::be_u24","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 3 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":480748,"byte_end":480757,"line_start":92,"line_end":92,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1987},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":481702,"byte_end":481708,"line_start":126,"line_end":126,"column_start":8,"column_end":14},"name":"be_u32","qualname":"::number::complete::be_u32","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":481685,"byte_end":481694,"line_start":125,"line_end":125,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1990},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":482663,"byte_end":482669,"line_start":159,"line_end":159,"column_start":8,"column_end":14},"name":"be_u64","qualname":"::number::complete::be_u64","value":"fn <I, E> (input: I) -> IResult<I, u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":482646,"byte_end":482655,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1993},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":483695,"byte_end":483702,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"be_u128","qualname":"::number::complete::be_u128","value":"fn <I, E> (input: I) -> IResult<I, u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":483658,"byte_end":483667,"line_start":191,"line_end":191,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":483668,"byte_end":483687,"line_start":192,"line_end":192,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1996},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":484603,"byte_end":484608,"line_start":226,"line_end":226,"column_start":8,"column_end":13},"name":"be_i8","qualname":"::number::complete::be_i8","value":"fn <I, E> (input: I) -> IResult<I, i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":484586,"byte_end":484595,"line_start":225,"line_end":225,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1999},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":485274,"byte_end":485280,"line_start":249,"line_end":249,"column_start":8,"column_end":14},"name":"be_i16","qualname":"::number::complete::be_i16","value":"fn <I, E> (input: I) -> IResult<I, i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":485257,"byte_end":485266,"line_start":248,"line_end":248,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2002},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":485955,"byte_end":485961,"line_start":272,"line_end":272,"column_start":8,"column_end":14},"name":"be_i24","qualname":"::number::complete::be_i24","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":485938,"byte_end":485947,"line_start":271,"line_end":271,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2005},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":486792,"byte_end":486798,"line_start":300,"line_end":300,"column_start":8,"column_end":14},"name":"be_i32","qualname":"::number::complete::be_i32","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":486775,"byte_end":486784,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2008},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":487503,"byte_end":487509,"line_start":323,"line_end":323,"column_start":8,"column_end":14},"name":"be_i64","qualname":"::number::complete::be_i64","value":"fn <I, E> (input: I) -> IResult<I, i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":487486,"byte_end":487495,"line_start":322,"line_end":322,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2011},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":488285,"byte_end":488292,"line_start":347,"line_end":347,"column_start":8,"column_end":15},"name":"be_i128","qualname":"::number::complete::be_i128","value":"fn <I, E> (input: I) -> IResult<I, i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":488248,"byte_end":488257,"line_start":345,"line_end":345,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":488258,"byte_end":488277,"line_start":346,"line_end":346,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2014},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":488947,"byte_end":488952,"line_start":370,"line_end":370,"column_start":8,"column_end":13},"name":"le_u8","qualname":"::number::complete::le_u8","value":"fn <I, E> (input: I) -> IResult<I, u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":488930,"byte_end":488939,"line_start":369,"line_end":369,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2017},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":489806,"byte_end":489812,"line_start":400,"line_end":400,"column_start":8,"column_end":14},"name":"le_u16","qualname":"::number::complete::le_u16","value":"fn <I, E> (input: I) -> IResult<I, u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":489789,"byte_end":489798,"line_start":399,"line_end":399,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2020},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":490757,"byte_end":490763,"line_start":433,"line_end":433,"column_start":8,"column_end":14},"name":"le_u24","qualname":"::number::complete::le_u24","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 3 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":490740,"byte_end":490749,"line_start":432,"line_end":432,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2023},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":491715,"byte_end":491721,"line_start":466,"line_end":466,"column_start":8,"column_end":14},"name":"le_u32","qualname":"::number::complete::le_u32","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":491698,"byte_end":491707,"line_start":465,"line_end":465,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2026},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":492697,"byte_end":492703,"line_start":499,"line_end":499,"column_start":8,"column_end":14},"name":"le_u64","qualname":"::number::complete::le_u64","value":"fn <I, E> (input: I) -> IResult<I, u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":492680,"byte_end":492689,"line_start":498,"line_end":498,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2029},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":493750,"byte_end":493757,"line_start":533,"line_end":533,"column_start":8,"column_end":15},"name":"le_u128","qualname":"::number::complete::le_u128","value":"fn <I, E> (input: I) -> IResult<I, u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":493713,"byte_end":493722,"line_start":531,"line_end":531,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":493723,"byte_end":493742,"line_start":532,"line_end":532,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2032},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":494676,"byte_end":494681,"line_start":566,"line_end":566,"column_start":8,"column_end":13},"name":"le_i8","qualname":"::number::complete::le_i8","value":"fn <I, E> (input: I) -> IResult<I, i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":494659,"byte_end":494668,"line_start":565,"line_end":565,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2035},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":495350,"byte_end":495356,"line_start":589,"line_end":589,"column_start":8,"column_end":14},"name":"le_i16","qualname":"::number::complete::le_i16","value":"fn <I, E> (input: I) -> IResult<I, i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":495333,"byte_end":495342,"line_start":588,"line_end":588,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2038},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":496034,"byte_end":496040,"line_start":612,"line_end":612,"column_start":8,"column_end":14},"name":"le_i24","qualname":"::number::complete::le_i24","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":496017,"byte_end":496026,"line_start":611,"line_end":611,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2041},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":496874,"byte_end":496880,"line_start":640,"line_end":640,"column_start":8,"column_end":14},"name":"le_i32","qualname":"::number::complete::le_i32","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":496857,"byte_end":496866,"line_start":639,"line_end":639,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2044},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":497588,"byte_end":497594,"line_start":663,"line_end":663,"column_start":8,"column_end":14},"name":"le_i64","qualname":"::number::complete::le_i64","value":"fn <I, E> (input: I) -> IResult<I, i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":497571,"byte_end":497580,"line_start":662,"line_end":662,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2047},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":498373,"byte_end":498380,"line_start":687,"line_end":687,"column_start":8,"column_end":15},"name":"le_i128","qualname":"::number::complete::le_i128","value":"fn <I, E> (input: I) -> IResult<I, i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":498336,"byte_end":498345,"line_start":685,"line_end":685,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":498346,"byte_end":498365,"line_start":686,"line_end":686,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2050},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":499057,"byte_end":499063,"line_start":710,"line_end":710,"column_start":8,"column_end":14},"name":"be_f32","qualname":"::number::complete::be_f32","value":"fn <I, E> (input: I) -> IResult<I, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":499040,"byte_end":499049,"line_start":709,"line_end":709,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2053},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":499821,"byte_end":499827,"line_start":736,"line_end":736,"column_start":8,"column_end":14},"name":"be_f64","qualname":"::number::complete::be_f64","value":"fn <I, E> (input: I) -> IResult<I, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":499804,"byte_end":499813,"line_start":735,"line_end":735,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2056},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":500564,"byte_end":500570,"line_start":762,"line_end":762,"column_start":8,"column_end":14},"name":"le_f32","qualname":"::number::complete::le_f32","value":"fn <I, E> (input: I) -> IResult<I, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":500547,"byte_end":500556,"line_start":761,"line_end":761,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2059},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":501331,"byte_end":501337,"line_start":788,"line_end":788,"column_start":8,"column_end":14},"name":"le_f64","qualname":"::number::complete::le_f64","value":"fn <I, E> (input: I) -> IResult<I, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":501314,"byte_end":501323,"line_start":787,"line_end":787,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2062},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":502109,"byte_end":502116,"line_start":815,"line_end":815,"column_start":8,"column_end":15},"name":"hex_u32","qualname":"::number::complete::hex_u32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a hex-encoded integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":502092,"byte_end":502101,"line_start":814,"line_end":814,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2066},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":503307,"byte_end":503322,"line_start":857,"line_end":857,"column_start":8,"column_end":23},"name":"recognize_float","qualname":"::number::complete::recognize_float","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns the corresponding slice","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":503240,"byte_end":503264,"line_start":855,"line_end":855,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2071},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":505761,"byte_end":505766,"line_start":939,"line_end":939,"column_start":8,"column_end":13},"name":"float","qualname":"::number::complete::float","value":"fn <T, E> (input: T) -> IResult<T, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f32","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":505726,"byte_end":505753,"line_start":938,"line_end":938,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":2074},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":507941,"byte_end":507947,"line_start":1006,"line_end":1006,"column_start":8,"column_end":14},"name":"double","qualname":"::number::complete::double","value":"fn <T, E> (input: T) -> IResult<T, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f64","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/complete.rs","byte_start":507906,"byte_end":507933,"line_start":1005,"line_end":1005,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":2077},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::number::streaming","value":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2082},{"krate":0,"index":2087},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2094},{"krate":0,"index":2097},{"krate":0,"index":2102},{"krate":0,"index":2105},{"krate":0,"index":2108},{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2117},{"krate":0,"index":2120},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":2129},{"krate":0,"index":2132},{"krate":0,"index":2135},{"krate":0,"index":2138},{"krate":0,"index":2141},{"krate":0,"index":2144},{"krate":0,"index":2147},{"krate":0,"index":2150},{"krate":0,"index":2153},{"krate":0,"index":2156},{"krate":0,"index":2159},{"krate":0,"index":2162},{"krate":0,"index":2165},{"krate":0,"index":2168},{"krate":0,"index":2171},{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2180},{"krate":0,"index":2183},{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2193},{"krate":0,"index":2198},{"krate":0,"index":2201}],"decl_id":null,"docs":" parsers recognizing numbers, streaming version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2105},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":518923,"byte_end":518928,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"be_u8","qualname":"::number::streaming::be_u8","value":"fn <I, E> (input: I) -> IResult<I, u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":518906,"byte_end":518915,"line_start":27,"line_end":27,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2108},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":519769,"byte_end":519775,"line_start":58,"line_end":58,"column_start":8,"column_end":14},"name":"be_u16","qualname":"::number::streaming::be_u16","value":"fn <I, E> (input: I) -> IResult<I, u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":519752,"byte_end":519761,"line_start":57,"line_end":57,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2111},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":520713,"byte_end":520719,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"be_u24","qualname":"::number::streaming::be_u24","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 3 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":520696,"byte_end":520705,"line_start":90,"line_end":90,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2114},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":521664,"byte_end":521670,"line_start":124,"line_end":124,"column_start":8,"column_end":14},"name":"be_u32","qualname":"::number::streaming::be_u32","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":521647,"byte_end":521656,"line_start":123,"line_end":123,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2117},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":522639,"byte_end":522645,"line_start":157,"line_end":157,"column_start":8,"column_end":14},"name":"be_u64","qualname":"::number::streaming::be_u64","value":"fn <I, E> (input: I) -> IResult<I, u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":522622,"byte_end":522631,"line_start":156,"line_end":156,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2120},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":523682,"byte_end":523689,"line_start":190,"line_end":190,"column_start":8,"column_end":15},"name":"be_u128","qualname":"::number::streaming::be_u128","value":"fn <I, E> (input: I) -> IResult<I, u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":523645,"byte_end":523654,"line_start":188,"line_end":188,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":523655,"byte_end":523674,"line_start":189,"line_end":189,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2123},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":524583,"byte_end":524588,"line_start":220,"line_end":220,"column_start":8,"column_end":13},"name":"be_i8","qualname":"::number::streaming::be_i8","value":"fn <I, E> (input: I) -> IResult<I, i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":524566,"byte_end":524575,"line_start":219,"line_end":219,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2126},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":525229,"byte_end":525235,"line_start":240,"line_end":240,"column_start":8,"column_end":14},"name":"be_i16","qualname":"::number::streaming::be_i16","value":"fn <I, E> (input: I) -> IResult<I, i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":525212,"byte_end":525221,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2129},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":525885,"byte_end":525891,"line_start":260,"line_end":260,"column_start":8,"column_end":14},"name":"be_i24","qualname":"::number::streaming::be_i24","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":525868,"byte_end":525877,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2132},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":526697,"byte_end":526703,"line_start":285,"line_end":285,"column_start":8,"column_end":14},"name":"be_i32","qualname":"::number::streaming::be_i32","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":526680,"byte_end":526689,"line_start":284,"line_end":284,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2135},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":527391,"byte_end":527397,"line_start":306,"line_end":306,"column_start":8,"column_end":14},"name":"be_i64","qualname":"::number::streaming::be_i64","value":"fn <I, E> (input: I) -> IResult<I, i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":527374,"byte_end":527383,"line_start":305,"line_end":305,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2138},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":528153,"byte_end":528160,"line_start":327,"line_end":327,"column_start":8,"column_end":15},"name":"be_i128","qualname":"::number::streaming::be_i128","value":"fn <I, E> (input: I) -> IResult<I, i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":528116,"byte_end":528125,"line_start":325,"line_end":325,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":528126,"byte_end":528145,"line_start":326,"line_end":326,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2141},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":528798,"byte_end":528803,"line_start":347,"line_end":347,"column_start":8,"column_end":13},"name":"le_u8","qualname":"::number::streaming::le_u8","value":"fn <I, E> (input: I) -> IResult<I, u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":528781,"byte_end":528790,"line_start":346,"line_end":346,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2144},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":529647,"byte_end":529653,"line_start":377,"line_end":377,"column_start":8,"column_end":14},"name":"le_u16","qualname":"::number::streaming::le_u16","value":"fn <I, E> (input: I) -> IResult<I, u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":529630,"byte_end":529639,"line_start":376,"line_end":376,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2147},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":530613,"byte_end":530619,"line_start":410,"line_end":410,"column_start":8,"column_end":14},"name":"le_u24","qualname":"::number::streaming::le_u24","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":530596,"byte_end":530605,"line_start":409,"line_end":409,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2150},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":531585,"byte_end":531591,"line_start":443,"line_end":443,"column_start":8,"column_end":14},"name":"le_u32","qualname":"::number::streaming::le_u32","value":"fn <I, E> (input: I) -> IResult<I, u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":531568,"byte_end":531577,"line_start":442,"line_end":442,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2153},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":532581,"byte_end":532587,"line_start":476,"line_end":476,"column_start":8,"column_end":14},"name":"le_u64","qualname":"::number::streaming::le_u64","value":"fn <I, E> (input: I) -> IResult<I, u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":532564,"byte_end":532573,"line_start":475,"line_end":475,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2156},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":533649,"byte_end":533656,"line_start":510,"line_end":510,"column_start":8,"column_end":15},"name":"le_u128","qualname":"::number::streaming::le_u128","value":"fn <I, E> (input: I) -> IResult<I, u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":533612,"byte_end":533621,"line_start":508,"line_end":508,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":533622,"byte_end":533641,"line_start":509,"line_end":509,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2159},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":534568,"byte_end":534573,"line_start":540,"line_end":540,"column_start":8,"column_end":13},"name":"le_i8","qualname":"::number::streaming::le_i8","value":"fn <I, E> (input: I) -> IResult<I, i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":534551,"byte_end":534560,"line_start":539,"line_end":539,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2162},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":535246,"byte_end":535252,"line_start":563,"line_end":563,"column_start":8,"column_end":14},"name":"le_i16","qualname":"::number::streaming::le_i16","value":"fn <I, E> (input: I) -> IResult<I, i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":535229,"byte_end":535238,"line_start":562,"line_end":562,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2165},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":535934,"byte_end":535940,"line_start":586,"line_end":586,"column_start":8,"column_end":14},"name":"le_i24","qualname":"::number::streaming::le_i24","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":535917,"byte_end":535926,"line_start":585,"line_end":585,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2168},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":536778,"byte_end":536784,"line_start":614,"line_end":614,"column_start":8,"column_end":14},"name":"le_i32","qualname":"::number::streaming::le_i32","value":"fn <I, E> (input: I) -> IResult<I, i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":536761,"byte_end":536770,"line_start":613,"line_end":613,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2171},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":537496,"byte_end":537502,"line_start":637,"line_end":637,"column_start":8,"column_end":14},"name":"le_i64","qualname":"::number::streaming::le_i64","value":"fn <I, E> (input: I) -> IResult<I, i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":537479,"byte_end":537488,"line_start":636,"line_end":636,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2174},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":538286,"byte_end":538293,"line_start":661,"line_end":661,"column_start":8,"column_end":15},"name":"le_i128","qualname":"::number::streaming::le_i128","value":"fn <I, E> (input: I) -> IResult<I, i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":538249,"byte_end":538258,"line_start":659,"line_end":659,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":538259,"byte_end":538278,"line_start":660,"line_end":660,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2177},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":538978,"byte_end":538984,"line_start":683,"line_end":683,"column_start":8,"column_end":14},"name":"be_f32","qualname":"::number::streaming::be_f32","value":"fn <I, E> (input: I) -> IResult<I, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":538961,"byte_end":538970,"line_start":682,"line_end":682,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2180},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":539746,"byte_end":539752,"line_start":708,"line_end":708,"column_start":8,"column_end":14},"name":"be_f64","qualname":"::number::streaming::be_f64","value":"fn <I, E> (input: I) -> IResult<I, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":539729,"byte_end":539738,"line_start":707,"line_end":707,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2183},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":540493,"byte_end":540499,"line_start":733,"line_end":733,"column_start":8,"column_end":14},"name":"le_f32","qualname":"::number::streaming::le_f32","value":"fn <I, E> (input: I) -> IResult<I, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":540476,"byte_end":540485,"line_start":732,"line_end":732,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2186},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":541269,"byte_end":541275,"line_start":758,"line_end":758,"column_start":8,"column_end":14},"name":"le_f64","qualname":"::number::streaming::le_f64","value":"fn <I, E> (input: I) -> IResult<I, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":541252,"byte_end":541261,"line_start":757,"line_end":757,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2189},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":542030,"byte_end":542037,"line_start":784,"line_end":784,"column_start":8,"column_end":15},"name":"hex_u32","qualname":"::number::streaming::hex_u32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a hex-encoded integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":542013,"byte_end":542022,"line_start":783,"line_end":783,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2193},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":543260,"byte_end":543275,"line_start":826,"line_end":826,"column_start":8,"column_end":23},"name":"recognize_float","qualname":"::number::streaming::recognize_float","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a floating point number in text format and returns the corresponding part of the input","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":543193,"byte_end":543217,"line_start":824,"line_end":824,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2198},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":545751,"byte_end":545756,"line_start":906,"line_end":906,"column_start":8,"column_end":13},"name":"float","qualname":"::number::streaming::float","value":"fn <T, E> (input: T) -> IResult<T, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f32","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":545716,"byte_end":545743,"line_start":905,"line_end":905,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":2201},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":548095,"byte_end":548101,"line_start":977,"line_end":977,"column_start":8,"column_end":14},"name":"double","qualname":"::number::streaming::double","value":"fn <T, E> (input: T) -> IResult<T, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f64","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/streaming.rs","byte_start":548060,"byte_end":548087,"line_start":976,"line_end":976,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5437},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/mod.rs","byte_start":468119,"byte_end":468122,"line_start":13,"line_end":13,"column_start":3,"column_end":6},"name":"Big","qualname":"::number::Endianness::Big","value":"Endianness::Big","parent":{"krate":0,"index":5436},"children":[],"decl_id":null,"docs":" big endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5439},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/mod.rs","byte_start":468146,"byte_end":468152,"line_start":15,"line_end":15,"column_start":3,"column_end":9},"name":"Little","qualname":"::number::Endianness::Little","value":"Endianness::Little","parent":{"krate":0,"index":5436},"children":[],"decl_id":null,"docs":" little endian\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5436},"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/mod.rs","byte_start":468087,"byte_end":468097,"line_start":11,"line_end":11,"column_start":10,"column_end":20},"name":"Endianness","qualname":"::number::Endianness","value":"Endianness::{Big, Little}","parent":null,"children":[{"krate":0,"index":5437},{"krate":0,"index":5439}],"decl_id":null,"docs":" Configurable endianness\n","sig":null,"attributes":[]}],"impls":[{"id":1,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25311,"byte_end":25323,"line_start":103,"line_end":103,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25803,"byte_end":25815,"line_start":123,"line_end":123,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":33568,"byte_end":33577,"line_start":379,"line_end":379,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47428,"byte_end":47434,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49176,"byte_end":49179,"line_start":75,"line_end":75,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49827,"byte_end":49830,"line_start":106,"line_end":106,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50256,"byte_end":50259,"line_start":121,"line_end":121,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50437,"byte_end":50440,"line_start":129,"line_end":129,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50659,"byte_end":50662,"line_start":136,"line_end":136,"column_start":20,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50758,"byte_end":50761,"line_start":142,"line_end":142,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":51265,"byte_end":51268,"line_start":160,"line_end":160,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":52981,"byte_end":52982,"line_start":234,"line_end":234,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":53305,"byte_end":53308,"line_start":250,"line_end":250,"column_start":83,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":53714,"byte_end":53721,"line_start":267,"line_end":267,"column_start":7,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54074,"byte_end":54081,"line_start":283,"line_end":283,"column_start":7,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54411,"byte_end":54414,"line_start":299,"line_end":299,"column_start":7,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54771,"byte_end":54773,"line_start":315,"line_end":315,"column_start":23,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":68162,"byte_end":68163,"line_start":505,"line_end":505,"column_start":7,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":434},{"krate":0,"index":437},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":75131,"byte_end":75132,"line_start":780,"line_end":780,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":105984,"byte_end":105998,"line_start":709,"line_end":709,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16144,"byte_end":16149,"line_start":476,"line_end":476,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16212,"byte_end":16222,"line_start":482,"line_end":482,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":616}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16245,"byte_end":16251,"line_start":484,"line_end":484,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":904}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16274,"byte_end":16282,"line_start":486,"line_end":486,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":950}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16305,"byte_end":16310,"line_start":488,"line_end":488,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1079}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16334,"byte_end":16339,"line_start":491,"line_end":491,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1302}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/mod.rs","byte_start":286690,"byte_end":286698,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1319}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bytes/mod.rs","byte_start":286708,"byte_end":286717,"line_start":6,"line_end":6,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1451}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16362,"byte_end":16366,"line_start":493,"line_end":493,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1583}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","byte_start":364093,"byte_end":364101,"line_start":7,"line_end":7,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1589}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/bits/mod.rs","byte_start":364111,"byte_end":364120,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1622}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16390,"byte_end":16399,"line_start":496,"line_end":496,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1696}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":380917,"byte_end":380925,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1701}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/character/mod.rs","byte_start":380935,"byte_end":380944,"line_start":9,"line_end":9,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1816}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/lib.rs","byte_start":16490,"byte_end":16496,"line_start":505,"line_end":505,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1939}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/mod.rs","byte_start":467975,"byte_end":467983,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1949}},{"kind":"Mod","span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/number/mod.rs","byte_start":467993,"byte_end":468002,"line_start":7,"line_end":7,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2077}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":22308,"byte_end":22313,"line_start":15,"line_end":15,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":68}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":23182,"byte_end":23187,"line_start":38,"line_end":38,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":74}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25311,"byte_end":25323,"line_start":103,"line_end":103,"column_start":27,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2204},"to":{"krate":0,"index":68}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":25803,"byte_end":25815,"line_start":123,"line_end":123,"column_start":29,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2204},"to":{"krate":0,"index":74}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/error.rs","byte_start":33568,"byte_end":33577,"line_start":379,"line_end":379,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":47428,"byte_end":47434,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49176,"byte_end":49179,"line_start":75,"line_end":75,"column_start":9,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":49827,"byte_end":49830,"line_start":106,"line_end":106,"column_start":9,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50256,"byte_end":50259,"line_start":121,"line_end":121,"column_start":6,"column_end":9},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50437,"byte_end":50440,"line_start":129,"line_end":129,"column_start":6,"column_end":9},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50659,"byte_end":50662,"line_start":136,"line_end":136,"column_start":20,"column_end":23},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2367},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":50758,"byte_end":50761,"line_start":142,"line_end":142,"column_start":26,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2367},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":51265,"byte_end":51268,"line_start":160,"line_end":160,"column_start":19,"column_end":22},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2367},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":52981,"byte_end":52982,"line_start":234,"line_end":234,"column_start":42,"column_end":43},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":53305,"byte_end":53308,"line_start":250,"line_end":250,"column_start":83,"column_end":86},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":53714,"byte_end":53721,"line_start":267,"line_end":267,"column_start":7,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":209},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54074,"byte_end":54081,"line_start":283,"line_end":283,"column_start":7,"column_end":14},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":226},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54411,"byte_end":54414,"line_start":299,"line_end":299,"column_start":7,"column_end":10},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":242},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/internal.rs","byte_start":54771,"byte_end":54773,"line_start":315,"line_end":315,"column_start":23,"column_end":25},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":256},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":63185,"byte_end":63190,"line_start":331,"line_end":331,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":380}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":66193,"byte_end":66198,"line_start":450,"line_end":450,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":414}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":68162,"byte_end":68163,"line_start":505,"line_end":505,"column_start":7,"column_end":8},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":429},"to":{"krate":0,"index":414}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/traits.rs","byte_start":75131,"byte_end":75132,"line_start":780,"line_end":780,"column_start":20,"column_end":21},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":489},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/acer/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-6.0.0-alpha1/src/combinator/mod.rs","byte_start":105984,"byte_end":105998,"line_start":709,"line_end":709,"column_start":22,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":872},"to":{"krate":4294967295,"index":4294967295}}]}